{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/common/utils.js","webpack://backend/./backend/src/common/build.js","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/en-us.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/common/watcher.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/article.js","webpack://backend/./backend/src/controller/category.js","webpack://backend/./backend/src/controller/render.js","webpack://backend/./backend/src/controller/site.js","webpack://backend/./backend/src/controller/tag.js","webpack://backend/./backend/src/controller/comment.js","webpack://backend/./backend/src/controller/rss.js","webpack://backend/external \"path\"","webpack://backend/./backend/src/common/time.js","webpack://backend/./backend/src/controller/queue.js","webpack://backend/./backend/src/controller/event.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/article.js","webpack://backend/./backend/src/service/category.js","webpack://backend/./backend/src/service/render.js","webpack://backend/./backend/src/service/site.js","webpack://backend/./backend/src/service/tag.js","webpack://backend/./backend/src/service/event.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/article.js","webpack://backend/./backend/src/model/category.js","webpack://backend/./backend/src/model/content.js","webpack://backend/./backend/src/model/tag.js","webpack://backend/./backend/src/model/articleTag.js","webpack://backend/./backend/src/model/articleTagRef.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/keywords.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,qC;;;;;;;ACCA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,YAAY;AACZ,YAAY;AACZ,cAAc;AACd,eAAe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;;;;;;AC/EA,aAAa,mBAAO,CAAC,EAAM;AAC3B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,EAAW;AAChC,cAAc,mBAAO,CAAC,CAAY;;AAElC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+DAA+D,sBAAsB;AACrF;AACA;;AAEA,uBAAuB,OAAO;AAC9B,+DAA+D,sBAAsB;AACrF;AACA;;AAEA,2BAA2B,WAAW;AACtC,0CAA0C,SAAS,cAAc,SAAS,GAAG,sBAAsB;AACnG;AACA;;AAEA,2BAA2B,iBAAiB;AAC5C,0CAA0C,SAAS,cAAc,SAAS,GAAG,sBAAsB;AACnG;AACA;AACA;;AAEA,kCAAkC,WAAW;AAC7C,qCAAqC,WAAW;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA,0BAA0B;AAC1B;AACA,OAAO,YAAY,oBAAoB;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,4CAA4C,WAAW;AACvD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yCAAyC,sBAAsB;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD,4BAA4B,KAAK,wBAAwB;AAC3G,gBAAgB,OAAO,EAAE,UAAU,EAAE,qBAAqB,GAAG,YAAY;AACzE;AACA,cAAc,cAAc,EAAE,mDAAmD;AACjF;AACA;AACA;AACA,cAAc,QAAQ,EAAE,yDAAyD;AACjF;AACA;AACA;AACA,qBAAqB,QAAQ,GAAG,KAAK;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,sBAAsB;AACrE;;AAEA;;AAEA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA,qCAAqC,WAAW;AAChD,mBAAmB;AACnB;AACA,8BAA8B,OAAO;AACrC;AACA,gCAAgC,+BAA+B;AAC/D;AACA,6BAA6B,OAAO;AACpC;;AAEA,uBAAuB,aAAa;AACpC;AACA,gEAAgE,aAAa;AAC7E;AACA;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,mBAAmB;AACnB;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA,+BAA+B,OAAO;AACtC;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,qBAAqB,YAAY;AACtE;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;;AAEA,yBAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP,aAAa,cAAc;AAC3B;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA,kCAAkC,kBAAkB;AACpD;AACA,+BAA+B,iBAAiB;AAChD;;AAEA,wBAAwB,gBAAgB;AACxC;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA,KAAK;AACL;;AAEA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,KAAK;AACL;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,mCAAmC,EAAE,qBAAqB,YAAY;AACtE;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;;AAGA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B,KAAK;AACL;AACA;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,qBAAqB,uCAAuC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,iBAAiB;AAC5E,oBAAoB,eAAe,IAAI,WAAW;AAClD;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD,yCAAyC,gBAAgB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU,WAAW;AAClC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;;AAEA,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,6CAA6C;AACnF;AACA;AACA;AACA,oEAAoE,yBAAyB;AAC7F;AACA;AACA;AACA,8BAA8B,eAAe,qBAAqB,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,gBAAgB;AACxC,uCAAuC,iDAAiD;AACxF,uCAAuC,+CAA+C;AACtF;AACA;;AAEA,sBAAsB,6BAA6B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iBAAiB;AACzE;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD,+DAA+D;AACjH;AACA;AACA;AACA,mDAAmD,kBAAkB,IAAI,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAmB,GAAG,IAAI,GAAG,mBAAmB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,KAAK;AACxC;AACA;;AAEA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD;AACA,yBAAyB,eAAe,IAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0FAA0F;AAC1F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,mDAAmD,qBAAqB,GAAG,qBAAqB;AAChG,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;;AAGA;;AAEA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uBAAuB,GAAG,wBAAwB;AACvE,WAAW;AACX;;AAEA;AACA,kCAAkC,mDAAmD;AACrF;;AAEA;AACA;AACA,oEAAoE;;AAEpE;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B,IAAI,eAAe,EAAE,yBAAyB;AACjG,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,uCAAuC;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,uCAAuC,WAAW;;AAElD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,iBAAiB;AACjC,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,iBAAiB;AACrC,WAAW;AACX;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,GAAG,IAAI;AAClC,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;;AAEtC;AACA,qCAAqC,OAAO;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,iCAAiC,mDAAmD;;AAEpF;AACA;AACA,oEAAoE;;AAEpE;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B,IAAI,eAAe,EAAE,yBAAyB;AACjG,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8CAA8C,mCAAmC;AACjF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA,yBAAyB,WAAW;AACpC;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA,qCAAqC,WAAW;;AAEhD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW,EAAE,yDAAyD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM;AACR;AACA;AACA,4BAA4B,YAAY;AACxC;;AAEA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;;AAEA,WAAW,WAAW;AACtB;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,MAAM;AAC7B;AACA,gEAAgE,mBAAmB;AACnF;AACA;AACA,qCAAqC,6BAA6B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,iBAAiB,GAAG,wBAAwB,GAAG,4BAA4B;AACzF;;AAEA,sBAAsB,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;;;;;;;AC7pCA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;AACrD,kBAAkB,mBAAO,CAAC,EAAqB;;AAE/C;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACjCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;;;;ACzFA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;;;;;;;ACDA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA,oCAAoC,4CAA4C;AAChF;;AAEA;AACA;AACA,oCAAoC,qDAAqD;AACzF;;AAEA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,2CAA2C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD,WAAW;AACX,SAAS;AACT;;AAEA;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AC9GA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,iBAAiB,mBAAO,CAAC,EAA0B;AACnD,eAAe,mBAAO,CAAC,EAAwB;AAC/C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,YAAY,mBAAO,CAAC,EAAqB;AACzC,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,YAAY,mBAAO,CAAC,EAAqB;AACzC,cAAc,mBAAO,CAAC,EAAuB;AAC7C,cAAc,mBAAO,CAAC,EAAuB;;AAE7C;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,iFAAiF;AACtF;AACA,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,yFAAyF,QAAQ,gBAAgB,EAAE,EAAE;AAC1H,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,0FAA0F,QAAQ,gBAAgB,EAAE,EAAE;AAC3H,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,2FAA2F,QAAQ,gBAAgB,EAAE,EAAE;AAC5H,KAAK,4DAA4D;AACjE,KAAK,mEAAmE;AACxE;AACA,KAAK,2DAA2D;AAChE;AACA,KAAK;AACL,aAAa,SAAS,0BAA0B,EAAE;AAClD,KAAK;AACL;AACA,KAAK,sFAAsF,QAAQ,gBAAgB,EAAE,EAAE;AACvH,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,sEAAsE,SAAS,2DAA2D,EAAE,EAAE;AACnJ,KAAK,sEAAsE,SAAS,2DAA2D,EAAE,EAAE;AACnJ,KAAK,iFAAiF,SAAS,2DAA2D,EAAE,EAAE;AAC9J,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,+FAA+F,SAAS,2DAA2D,EAAE,EAAE;AAC5K,KAAK,gGAAgG,SAAS,2DAA2D,EAAE,EAAE;AAC7K,KAAK,8DAA8D;AACnE,KAAK,wDAAwD;AAC7D,KAAK,2DAA2D;AAChE,KAAK,+DAA+D;AACpE,KAAK,2DAA2D;AAChE,KAAK,kGAAkG,QAAQ,gBAAgB,EAAE,EAAE;AACnI,KAAK,iEAAiE,SAAS,2DAA2D,EAAE,EAAE;AAC9I;AACA,KAAK,qEAAqE,SAAS,2DAA2D,EAAE,EAAE;AAClJ,KAAK;AACL,iBAAiB,wBAAwB;AACzC,cAAc,2DAA2D;AACzE,KAAK,EAAE;AACP,KAAK,8DAA8D;AACnE,KAAK,kEAAkE;AACvE,KAAK,oEAAoE,SAAS,2DAA2D,EAAE,EAAE;AACjJ,KAAK,uEAAuE,SAAS,2DAA2D,EAAE,EAAE;AACpJ,KAAK,qEAAqE,SAAS,2DAA2D,EAAE,EAAE;AAClJ,KAAK,qEAAqE;AAC1E;AACA,KAAK,oDAAoD;AACzD;AACA,KAAK,uGAAuG;AAC5G,KAAK,qHAAqH;AAC1H,KAAK,oGAAoG;AACzG;AACA,KAAK;AACL,aAAa,QAAQ,gBAAgB,EAAE;AACvC,KAAK;AACL;AACA,KAAK,mGAAmG,QAAQ,gBAAgB,EAAE,EAAE;AACpI;AACA;AACA;AACA;AACA,OAAO,2DAA2D;AAClE;AACA;AACA;AACA;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,qDAAqD,6CAA6C;AAClG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AC9FA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACjFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACdA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,kEAAkE,YAAY;AAC9E,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA,8DAA8D,YAAY;AAC1E,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,kCAAkC;AAClF,wBAAwB,aAAa;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,wBAAwB;AACzE,wBAAwB,aAAa;AACrC;;AAEA;AACA;AACA,4DAA4D,YAAY;AACxE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACzJA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;;;;;;;;ACfA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;AChCA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,OAAO;AACP;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,YAAY,2CAA2C;AACvD,4BAA4B,4CAA4C;AACxE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,2BAA2B,qBAAqB;AAChD,iBAAiB,kBAAkB;AACnC,6BAA6B,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,OAAO;AACP;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB;AACnD,YAAY,2CAA2C;AACvD,4BAA4B,4CAA4C;AACxE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU,uCAAuC;AACjD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,iBAAiB,iBAAiB;AAClC,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;AACA,kEAAkE,OAAO,SAAS,gBAAgB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,2DAA2D,0BAA0B;AACrF;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD,YAAY,0CAA0C;AACtD,4BAA4B,uCAAuC;AACnE,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,UAAU,0CAA0C;AACpD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,iBAAiB,eAAe;AAChC,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;;;;;;;;ACpOA,iC;;;;;;ACAA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uJAAuJ;AAC7K;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4CAA4C,IAAI,IAAI,IAAI;AACxD,GAAG;AACH;AACA;AACA,0CAA0C,IAAI,IAAI,IAAI;AACtD,GAAG;AACH;;;;;;;ACpCA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,uBAAuB;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA,8CAA8C,aAAa;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;ACpDA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;;;;;;ACfA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,iBAAiB,mBAAO,CAAC,EAAuB;AAChD,eAAe,mBAAO,CAAC,EAAqB;AAC5C,aAAa,mBAAO,CAAC,EAAmB;AACxC,YAAY,mBAAO,CAAC,EAAkB;AACtC,cAAc,mBAAO,CAAC,EAAoB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB;AAC5F,sEAAsE,wBAAwB;AAC9F;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,+CAA+C,8CAA8C;AAC7F;AACA;AACA;;AAEA;AACA;AACA,WAAW,2CAA2C;AACtD,WAAW,yDAAyD;AACpE,WAAW,0DAA0D;AACrE,WAAW,sEAAsE;AACjF,WAAW,yEAAyE;AACpF,WAAW,0EAA0E;AACrF,WAAW,4EAA4E;AACvF,WAAW,gEAAgE;AAC3E;AACA,oDAAoD,uCAAuC;;AAE3F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AChZA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,6BAA6B;AAC9C;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,OAAO;AACP,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,wBAAwB;AAC9E;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,oEAAoE,uBAAuB;;AAE3F;AACA;AACA,qDAAqD,iCAAiC;AACtF;;AAEA;AACA,iCAAiC,gDAAgD;AACjF;;AAEA,kBAAkB,uBAAuB;AACzC;AACA,qDAAqD,YAAY;;AAEjE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA,oDAAoD,MAAM;;AAE1D;AACA;AACA,qDAAqD,uCAAuC;AAC5F;;AAEA;AACA,iCAAiC,kEAAkE;AACnG;;AAEA,kBAAkB,+BAA+B;AACjD;AACA;AACA,uDAAuD,YAAY;;AAEnE;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;;AAET;AACA;AACA,yDAAyD,wBAAwB;AACjF;;AAEA;AACA,mCAAmC,+BAA+B;AAClE,OAAO;AACP;AACA;AACA,mCAAmC,+BAA+B;AAClE;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,OAAO;AACP;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;;AAEA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB,GAAG,wBAAwB;AACvE;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA,sEAAsE,wBAAwB;AAC9F,mEAAmE,QAAQ,iBAAiB,4BAA4B;AACxH;AACA;AACA;AACA,qDAAqD,aAAa,QAAQ,EAAE;AAC5E;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC/RA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA,gBAAgB,aAAa;AAC7B,gDAAgD,iBAAiB;AACjE;;AAEA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,2BAA2B,aAAa;AACxC;;AAEA,iBAAiB,gDAAgD;AACjE,kCAAkC,0DAA0D;AAC5F;;AAEA,oBAAoB,2DAA2D;AAC/E;AACA,qBAAqB;AACrB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,2BAA2B,2BAA2B;;AAEtD;AACA;;AAEA,kBAAkB,aAAa;AAC/B;AACA,wDAAwD,SAAS,aAAa,EAAE;AAChF;AACA;AACA,4CAA4C,aAAa;AACzD;;AAEA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;;AAEA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;;AAEA;AACA;AACA,6DAA6D,2BAA2B;AACxF,6BAA6B,yCAAyC;AACtE;AACA;;AAEA,gBAAgB,+BAA+B;AAC/C;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,2BAA2B,aAAa;AACxC;;AAEA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,OAAO;AACP;;AAEA,gBAAgB,gDAAgD;AAChE,uCAAuC,gDAAgD;AACvF;;AAEA,yBAAyB,gDAAgD;AACzE,wCAAwC,gDAAgD;AACxF;AACA;AACA;AACA,oDAAoD,iCAAiC;AACrF;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC,sCAAsC,aAAa;AACnD;;AAEA,wBAAwB,aAAa;AACrC,wCAAwC,aAAa;AACrD;AACA;AACA,sCAAsC,wCAAwC;AAC9E;;AAEA,oBAAoB,kCAAkC;AACtD;AACA;AACA;AACA,qEAAqE,iBAAiB;AACtF,2EAA2E,uBAAuB;AAClG;AACA,kDAAkD,6DAA6D;AAC/G;AACA;;AAEA;;AAEA;AACA;;;;;;;ACtKA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA,yBAAyB,wBAAwB;AACjD;AACA,iCAAiC,aAAa;AAC9C;;AAEA,yBAAyB,iCAAiC;AAC1D;AACA,iCAAiC,sBAAsB;AACvD;;AAEA,yBAAyB,iBAAiB;AAC1C;AACA,+DAA+D,qBAAqB;AACpF;AACA;AACA,wCAAwC,MAAM;AAC9C;;AAEA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACjCA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,kCAAkC,oBAAoB;AACtD;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;;AAEA,yBAAyB,YAAY;AACrC;AACA;AACA;;AAEA;AACA,yBAAyB,kBAAkB;AAC3C;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;AACA,kCAAkC,YAAY;AAC9C;AACA;AACA;AACA;;AAEA,oCAAoC,sBAAsB;AAC1D;AACA,mDAAmD,WAAW;AAC9D;;AAEA,6BAA6B,sBAAsB;AACnD;AACA,4CAA4C,WAAW;AACvD;;AAEA;AACA,6BAA6B,4BAA4B;AACzD;AACA;AACA;AACA,qCAAqC,iBAAiB;AACtD;AACA;AACA;AACA,iCAAiC,sBAAsB;AACvD;AACA,qCAAqC,WAAW;AAChD;AACA;;AAEA,wBAAwB,YAAY;AACpC;AACA;AACA;;AAEA,kBAAkB,4BAA4B;AAC9C;AACA,wCAAwC,WAAW;AACnD;AACA;;AAEA,yBAAyB,wBAAwB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA,wBAAwB,kCAAkC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB,GAAG,wBAAwB;AACrE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAAS;AACxB;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,SAAS;AAC5B,sBAAsB,SAAS;AAC/B;AACA;;AAEA,qBAAqB,kBAAkB;AACvC;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,sCAAsC,mCAAmC;AACzE;;AAEA,oBAAoB,uBAAuB;AAC3C;AACA;AACA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;;AAEA,8BAA8B,sBAAsB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;;AAEA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,0DAA0D,6DAA6D;AACvH;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,yBAAyB;AACnD,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC9QA,cAAc,mBAAO,CAAC,CAAoB;;AAE1C;;AAEA;;AAEA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,iCAAiC;AACnD;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yEAAyE;AACjH;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,MAAM;AACnC;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA,2CAA2C,mBAAmB;AAC9D,SAAS;AACT;AACA,8DAA8D,KAAK;AACnE;AACA;AACA,6CAA6C,mBAAmB;AAChE,WAAW;AACX;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;;AAEA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC5HA;;AAEA;;AAEA,8BAA8B,eAAe,kBAAkB,EAAE;AACjE;AACA;;AAEA;;AAEA;AACA;;;;;;;ACXA,gBAAgB,mBAAO,CAAC,EAAoB;AAC5C,iBAAiB,mBAAO,CAAC,EAAqB;AAC9C,gBAAgB,mBAAO,CAAC,EAAoB;AAC5C,YAAY,mBAAO,CAAC,EAAgB;AACpC,mBAAmB,mBAAO,CAAC,EAAuB;AAClD,sBAAsB,mBAAO,CAAC,EAA0B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA,kBAAkB,iCAAiC,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,kCAAkC,uBAAuB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,iCAAiC,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,6BAA6B,uBAAuB,EAAE;AACxE;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,oCAAoC,uBAAuB,EAAE;AAC/E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,uCAAuC,uBAAuB,EAAE;AAClF;AACA;AACA;AACA;;;;;;;ACPA;AACA,mBAAmB,mBAAO,CAAC,EAAiC;AAC5D,kBAAkB,mBAAO,CAAC,EAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA,aAAa,8CAA8C;AAC3D,aAAa,+CAA+C;AAC5D;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0BAA0B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAkE;AAC7F;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"require3\");","\n/**\n  escapeHtml: based on markdown-it\n**/\n\nconst HTML_ESCAPE_TEST_RE = /[&<>\"']/;\nconst HTML_ESCAPE_REPLACE_RE = /[&<>\"']/g;\nconst HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&#039;',\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\nconst URL_ESCAPE_TEST_RE = /[<>\"']/;\nconst URL_ESCAPE_REPLACE_RE = /[<>\"']/g;\nconst URL_REPLACEMENTS = {\n  '<': '%3C',\n  '>': '%3E',\n  '\"': '%22',\n  '\\'': '%27',\n};\n\nfunction replaceUnsafeCharURL(ch) {\n  return URL_REPLACEMENTS[ch];\n}\n\nfunction escapeURL(str) {\n  if (URL_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(URL_ESCAPE_REPLACE_RE, replaceUnsafeCharURL);\n  }\n  return str;\n}\n\nmodule.exports = {\n  atomClass(atomClass) {\n    let _atomClass;\n    if (atomClass) {\n      _atomClass = {\n        module: atomClass.module,\n        atomClassName: atomClass.atomClassName,\n        atomClassIdParent: atomClass.atomClassIdParent || 0,\n      };\n      if (atomClass.id) _atomClass.id = atomClass.id;\n    } else {\n      _atomClass = {\n        module: 'a-cms',\n        atomClassName: 'article',\n        atomClassIdParent: 0,\n      };\n    }\n    return _atomClass;\n  },\n  async atomClass2(ctx, atomClass) {\n    const _atomClass = this.atomClass(atomClass);\n    if (!_atomClass.id) {\n      const res = await ctx.meta.atomClass.get(_atomClass);\n      _atomClass.id = res.id;\n    }\n    return _atomClass;\n  },\n  escapeHtml(str) {\n    return escapeHtml(str);\n  },\n  escapeURL(str) {\n    return escapeURL(str);\n  },\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst ejs = require3('@zhennann/ejs');\nconst pMap = require3('p-map');\nconst extend = require3('extend2');\nconst fse = require3('fs-extra');\nconst moment = require3('moment');\nconst glob = require3('glob');\nconst bb = require3('bluebird');\nconst CleanCSS = require3('clean-css');\nconst shajs = require3('sha.js');\nconst babel = require3('@babel/core');\nconst UglifyJS = require3('uglify-js');\nconst less = require3('less');\nconst time = require('./time.js');\nconst utils = require('./utils.js');\n\nclass Build {\n\n  constructor(ctx, atomClass) {\n    this.ctx = ctx;\n    this.app = ctx.app;\n    this.atomClass = utils.atomClass(atomClass);\n    this.default = this.atomClass.module === 'a-cms';\n  }\n\n  async getConfigSiteBase() {\n    // config\n    //    try other then default\n    let configSite = this.ctx.config.module(this.atomClass.module).site;\n    if (!configSite) {\n      configSite = this.ctx.config.site;\n    }\n\n    // site\n    const site = extend(true, {}, configSite);\n\n    // plugins\n    site.plugins = {};\n    for (const relativeName in this.app.meta.modules) {\n      const module = this.app.meta.modules[relativeName];\n      if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin) {\n        site.plugins[relativeName] = this.ctx.config.module(relativeName).plugin;\n      }\n    }\n    return site;\n  }\n\n  async getConfigSite() {\n    const name = this.default ? 'config-site' : `config-site:${this.atomClass.module}`;\n    return await this.ctx.meta.status.get(name);\n  }\n\n  async setConfigSite({ data }) {\n    const name = this.default ? 'config-site' : `config-site:${this.atomClass.module}`;\n    await this.ctx.meta.status.set(name, data);\n  }\n\n  async getConfigLanguage({ language }) {\n    const name = this.default ? `config-${language}` : `config-${language}:${this.atomClass.module}`;\n    return await this.ctx.meta.status.get(name);\n  }\n\n  async setConfigLanguage({ language, data }) {\n    const name = this.default ? `config-${language}` : `config-${language}:${this.atomClass.module}`;\n    this._adjustConfigLanguange(data);\n    await this.ctx.meta.status.set(name, data);\n  }\n\n  async getConfigLanguagePreview({ language }) {\n    const site = await this.getSite({ language });\n    this._adjustConfigLanguange(site);\n    return site;\n  }\n\n  _adjustConfigLanguange(data) {\n    if (data) {\n      data.host = undefined;\n      data.language = undefined;\n      data.themes = undefined;\n    }\n  }\n\n  async getLanguages() {\n    const siteBase = await this.combineSiteBase();\n    const languages = [];\n    for (const item of siteBase.language.items.split(',')) {\n      languages.push({\n        title: this.ctx.text(item),\n        value: item,\n      });\n    }\n    return languages;\n  }\n\n  // site<plugin<theme<site(db)<language(db)\n  async combineSiteBase() {\n    // site\n    const site = await this.getConfigSiteBase();\n    // site(db) special for language/themes\n    const configSite = await this.getConfigSite();\n    if (configSite && configSite.language) site.language = configSite.language;\n    if (configSite && configSite.themes) site.themes = configSite.themes;\n    return site;\n  }\n\n  // site<plugin<theme<site(db)<language(db)\n  async combineSite({ siteBase, language }) {\n    // themeModuleName\n    const themeModuleName = siteBase.themes[language];\n    if (!themeModuleName) {\n      this.ctx.throw(1002, this.atomClass.module, this.atomClass.atomClassName, language);\n    }\n    // theme\n    const theme = this.combineThemes(themeModuleName);\n    // site(db)\n    const configSite = await this.getConfigSite();\n    // language(db)\n    const configLanguage = await this.getConfigLanguage({ language });\n    // combine\n    return extend(true, {},\n      siteBase, theme, configSite, configLanguage,\n      { language: { current: language } }\n    );\n  }\n\n  // theme extend\n  combineThemes(themeModuleName) {\n    return this._combineThemes(themeModuleName);\n  }\n\n  _combineThemes(themeModuleName) {\n    // module\n    const module = this.app.meta.modules[themeModuleName];\n    if (!module) this.ctx.throw(1003, themeModuleName);\n    const moduleExtend = module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.extend;\n    if (!moduleExtend) return this.ctx.config.module(themeModuleName).theme;\n    return extend(true, {},\n      this._combineThemes(moduleExtend),\n      this.ctx.config.module(themeModuleName).theme\n    );\n  }\n\n  // site<plugin<theme<site(db)<language(db)\n  async getSite({ language, options }) {\n    // options\n    options = options || {};\n    // base\n    const siteBase = await this.combineSiteBase();\n    // site\n    const site = await this.combineSite({ siteBase, language });\n    // serverUrl\n    site.serverUrl = this.getServerUrl('');\n    // atomClass\n    site.atomClass = this.atomClass;\n    // languages\n    site.languages = [];\n    for (const item of site.language.items.split(',')) {\n      site.languages.push({\n        name: item,\n        title: this.ctx.text.locale(item, item),\n        url: this.getUrl(site, item, 'index.html'),\n      });\n    }\n    // front\n    site.front = {};\n    // front.env\n    site.front.env = extend(true, {\n      base: site.base,\n      language: site.language,\n    }, site.env, {\n      site: {\n        serverUrl: site.serverUrl,\n        rawRootUrl: this.getUrlRawRoot(site),\n        atomClass: this.atomClass,\n      },\n    });\n    // front.envs\n    if (options.envs !== false) {\n      const envs = await this.getFrontEnvs({ language });\n      if (Object.keys(envs).length > 0) {\n        site.front.envs = envs;\n      }\n    }\n\n    // ok\n    return site;\n  }\n\n  // ////////////////////////////// url or path\n\n  getCMSPathName() {\n    return this.default ? 'cms' : `cms.${this.atomClass.module}`;\n  }\n\n  getUrlRawRoot(site) {\n    if (this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal) {\n      // cms or cms.moduleName\n      const cmsPathName = this.getCMSPathName();\n      const publicDir = this.ctx.app.config.static.prefix;\n      const prefix = this.ctx.meta.base.host ? `${this.ctx.meta.base.protocol}://${this.ctx.meta.base.host}` : '';\n      return `${prefix}${publicDir}${this.ctx.instance.id}/${cmsPathName}/dist`;\n    }\n    return `${site.host.url}${site.host.rootPath ? '/' + site.host.rootPath : ''}`;\n  }\n  getUrlRoot(site, language) {\n    const rawRoot = this.getUrlRawRoot(site);\n    return `${rawRoot}${language === site.language.default ? '' : '/' + language}`;\n  }\n  getUrl(site, language, path) {\n    const urlRoot = this.getUrlRoot(site, language);\n    return path ? `${urlRoot}/${path}` : urlRoot;\n  }\n  getServerUrl(path) {\n    return this.ctx.meta.base.getAbsoluteUrl(path);\n  }\n\n  async getPathCustom(language) {\n    const cms = await this.getPathCms();\n    return path.join(cms, language, 'custom');\n  }\n  async getPathIntermediate(language) {\n    const cms = await this.getPathCms();\n    return path.join(cms, language, 'intermediate');\n  }\n  async getPathDist(site, language) {\n    const rawDist = await this.getPathRawDist();\n    return path.join(rawDist, language === site.language.default ? '' : '/' + language);\n  }\n  async getPathCms() {\n    // cms\n    return await this.ctx.meta.base.getPath(this.getCMSPathName());\n  }\n  async getPathRawDist() {\n    // cms/dist\n    return await this.ctx.meta.base.getPath(`${this.getCMSPathName()}/dist`);\n  }\n\n  // ///////////////////////////////// render\n\n  async renderAllFiles({ language, progressId, progressNo }) {\n    // clearCache\n    ejs.clearCache();\n    // site\n    const site = await this.getSite({ language });\n    site.render = { scene: 'all' };\n    // render static\n    await this._renderStatic({ site });\n    // render articles\n    await this._renderArticles({ site, progressId, progressNo });\n    // render index\n    await this._renderIndex({ site });\n  }\n\n  async renderArticle({ key, inner }) {\n    // article\n    const article = await this.ctx.service.article._getArticle({ key, inner });\n    if (!article) return;\n    // clearCache\n    ejs.clearCache();\n    // site\n    const site = await this.getSite({ language: article.language });\n    site.render = { scene: 'single', inner };\n    // render article\n    await this._renderArticle({ site, article });\n    if (!inner) {\n      // write sitemap\n      await this._writeSitemap({ site, article });\n      // render index\n      await this._renderIndex({ site });\n    }\n  }\n\n  async deleteArticle({ key, article, inner }) {\n    // clearCache\n    ejs.clearCache();\n    // site\n    const site = await this.getSite({ language: article.language });\n    // remove file\n    const pathDist = await this.getPathDist(site, article.language);\n    await fse.remove(path.join(pathDist, article.url));\n    if (!inner) {\n      // remove sitemap\n      let xml = await fse.readFile(path.join(pathDist, 'sitemap.xml'));\n      const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n      xml = xml.toString().replace(regexp, '');\n      // save\n      await fse.writeFile(path.join(pathDist, 'sitemap.xml'), xml);\n      // render index\n      await this._renderIndex({ site });\n    }\n  }\n\n  async _renderArticles({ site, progressId, progressNo }) {\n    // anonymous user\n    const user = await this.ctx.meta.user.anonymous();\n    // articles\n    const articles = await this.ctx.meta.atom.select({\n      atomClass: this.atomClass,\n      options: {\n        where: {\n          'a.atomFlag': 2,\n          'f.language': site.language.current,\n        },\n        orders: [[ 'a.updatedAt', 'desc' ]],\n        page: null,\n        mode: 'search',\n      },\n      user: { id: user.id },\n      pageForce: false,\n    });\n\n    // progress\n    const progress1_Total = articles.length;\n    let progress1_progress = 0;\n\n    // concurrency\n    const mapper = async article => {\n      // progress: initialize\n      if (progressId) {\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total: progress1_Total,\n          progress: progress1_progress++,\n          text: article.atomName,\n        });\n      }\n      // render article\n      await this._renderArticle({ site, article });\n    };\n    await pMap(articles, mapper, { concurrency: 10 });\n    // write sitemap\n    await this._writeSitemaps({ site, articles });\n  }\n\n  async _renderArticle({ site, article }) {\n    // data\n    const data = await this.getData({ site });\n    data.article = article;\n    // render\n    await this._renderFile({\n      fileSrc: 'main/article.ejs',\n      fileDest: article.url,\n      fileDestAlt: `articles/${article.uuid}.html`,\n      data,\n    });\n  }\n\n  async _renderIndex({ site }) {\n    // index\n    const pathIntermediate = await this.getPathIntermediate(site.language.current);\n    const indexFiles = await bb.fromCallback(cb => {\n      glob(`${pathIntermediate}/main/index/\\*\\*/\\*.ejs`, cb);\n    });\n    for (const item of indexFiles) {\n      // data\n      const data = await this.getData({ site });\n      // path\n      const _fileSrc = item.substr(pathIntermediate.length + 1);\n      const _fileDest = _fileSrc.substr('main/index/'.length).replace('.ejs', '.html');\n      await this._renderFile({\n        fileSrc: _fileSrc,\n        fileDest: _fileDest,\n        data,\n      });\n    }\n  }\n\n  async _writeSitemaps({ site, articles }) {\n    // xml\n    let xml =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n`;\n    for (const article of articles) {\n      const loc = this.getUrl(site, site.language.current, article.url);\n      const lastmod = moment(article.updatedAt).format();\n      xml +=\n`  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n`;\n    }\n    xml += '</urlset>';\n    // save\n    const pathDist = await this.getPathDist(site, site.language.current);\n    const fileName = path.join(pathDist, 'sitemap.xml');\n    await fse.writeFile(fileName, xml);\n  }\n\n  async _writeSitemap({ site, article }) {\n    const loc = this.getUrl(site, site.language.current, article.url);\n    const lastmod = moment(article.updatedAt).format();\n    // load\n    const pathDist = await this.getPathDist(site, site.language.current);\n    const fileName = path.join(pathDist, 'sitemap.xml');\n    let xml;\n    const exists = await fse.pathExists(fileName);\n    if (!exists) {\n      xml =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n</urlset>`;\n    } else {\n      xml = await fse.readFile(fileName);\n      xml = xml.toString();\n      // remove\n      const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n      xml = xml.replace(regexp, '');\n      // append\n      xml = xml.replace('<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">',\n        `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>`);\n    }\n    // save\n    await fse.writeFile(fileName, xml);\n  }\n\n\n  async _renderStatic({ site }) {\n    // static\n    const pathIntermediate = await this.getPathIntermediate(site.language.current);\n    const staticFiles = await bb.fromCallback(cb => {\n      glob(`${pathIntermediate}/static/\\*\\*/\\*.ejs`, cb);\n    });\n    for (const item of staticFiles) {\n      // data\n      const data = await this.getData({ site });\n      // path\n      const _fileSrc = item.substr(pathIntermediate.length + 1);\n      await this._renderFile({\n        fileSrc: _fileSrc,\n        fileDest: _fileSrc.replace('.ejs', '.html'),\n        data,\n      });\n    }\n  }\n\n  async _renderFile({ fileSrc, fileDest, fileDestAlt, data }) {\n    // site\n    const site = data.site;\n    // language\n    const language = site.language.current;\n    // src\n    const pathIntermediate = await this.getPathIntermediate(language);\n    const fileName = path.join(pathIntermediate, fileSrc);\n    // dest\n    const pathDist = await this.getPathDist(site, language);\n    const fileWrite = path.join(pathDist, fileDest);\n    // data\n    data._filename = fileName;\n    data._path = fileSrc.replace('.ejs', '');\n    // env site\n    data.env('site.path', data._path);\n    // load src\n    let contentSrc = await fse.readFile(fileName);\n    // load includes of plugins\n    const pluginIncludes = await this._loadPluginIncludes({ site, language });\n    contentSrc = `${pluginIncludes}\\n${contentSrc}`;\n    // render\n    const options = this.getOptions();\n    options.filename = fileName;\n    let content = await ejs.render(contentSrc, data, options);\n    content = await this._renderEnvs({ data, content });\n    content = await this._renderCSSJSes({ data, content });\n    // hot load\n    if (this.app.meta.isTest || this.app.meta.isLocal) {\n      const fileWrite2 = fileWrite.replace(/\\\\/g, '\\\\\\\\');\n      content += `\n<script language=\"javascript\">\n$(document).ready(function() {\n  var __checkFileTimeout = ${this.ctx.config.checkFile.timeout};\n  var __fileTime=0;\n  function __checkFile() {\n    util.performAction({\n      method: 'post',\n      url: '/a/cms/site/checkFile',\n      body: { file: '${fileWrite2}', mtime: __fileTime }\n    }).then(function(stat) {\n      if (!stat) {\n        return window.setTimeout(__checkFile, __checkFileTimeout);\n      }\n      if (!__fileTime) {\n        __fileTime = stat.mtime;\n        return window.setTimeout(__checkFile, __checkFileTimeout);\n      }\n      if (__fileTime === stat.mtime) {\n        return window.setTimeout(__checkFile, __checkFileTimeout);\n      }\n      location.reload(true);\n    }).catch(function(){\n      return window.setTimeout(__checkFile, __checkFileTimeout);\n    });\n  }\n  __checkFile();\n});\n</script>\n          `;\n    }\n    // write\n    await fse.outputFile(fileWrite, content);\n    // alternative url\n    if (fileDestAlt && fileDestAlt !== fileDest) {\n      const fileWriteAlt = path.join(pathDist, fileDestAlt);\n      await fse.outputFile(fileWriteAlt, content);\n    }\n  }\n\n  _checkIfPluginEnable({ site, moduleName }) {\n    const config = site.plugins[moduleName];\n    return !config || config.enable !== false;\n  }\n\n  async _loadPluginIncludes({ site, language }) {\n    // if exists\n    if (site._pluginIncludes) return site._pluginIncludes;\n    // modulesArray\n    let pluginIncludes = '';\n    for (const module of this.app.meta.modulesArray) {\n      if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin\n        && this._checkIfPluginEnable({ site, moduleName: module.info.relativeName })\n      ) {\n        // path intermediate\n        const pathIntermediate = await this.getPathIntermediate(language);\n        let incudeFileName = path.join(pathIntermediate, `plugins/${module.info.relativeName}/include.ejs`);\n        const exists = await fse.pathExists(incudeFileName);\n        if (exists) {\n          incudeFileName = incudeFileName.replace(/\\\\/g, '\\\\\\\\');\n          pluginIncludes = `${pluginIncludes}<%- await include('${incudeFileName}') %>\\n`;\n        }\n      }\n    }\n    // ok\n    site._pluginIncludes = pluginIncludes;\n    return site._pluginIncludes;\n  }\n\n  async _renderCSSJSes({ data, content }) {\n    content = await this._renderCSSJS({ data, content, type: 'CSS', items: data._csses });\n    content = await this._renderCSSJS({ data, content, type: 'JS', items: data._jses });\n    return content;\n  }\n\n  async _renderCSSJS({ data, content, type, items }) {\n    if (items.length === 0) return content;\n    // site\n    const site = data.site;\n    // cache\n    if (!site._cache) site._cache = {};\n    if (!site._cache[type])site._cache[type] = {};\n    const cacheSha = shajs('sha256').update(items.join(',')).digest('hex');\n    let urlDest;\n    if (site._cache[type][cacheSha]) {\n      urlDest = site._cache[type][cacheSha];\n    } else {\n      // combine\n      let result = '';\n      for (const item of items) {\n        let _content;\n        if (path.extname(item) === '.ejs') {\n          // data\n          data._filename = item;\n          _content = await ejs.renderFile(item, data, this.getOptions());\n        } else {\n          _content = await fse.readFile(item);\n        }\n        // minify\n        if (type === 'CSS') {\n          let _needMinify = false;\n          if (item.indexOf('.less') > -1) {\n            // less\n            const output = await less.render(_content, { filename: item });\n            _content = output.css;\n            _needMinify = true;\n          } else if (item.indexOf('.min.css') === -1) {\n            // normal\n            _needMinify = true;\n          }\n          if (_needMinify) {\n            // minify\n            const output = new CleanCSS().minify(_content);\n            _content = output.styles;\n          }\n        } else {\n          if (item.indexOf('.min.js') === -1) {\n            _content = babel.transform(_content, { ast: false, babelrc: false, presets: [ '@babel/preset-env' ] }).code;\n            // not minify for test/dev\n            if (!this.ctx.app.meta.isTest && !this.ctx.app.meta.isLocal) {\n              const output = UglifyJS.minify(_content);\n              if (output.error) throw new Error(`${output.error.name}: ${output.error.message}`);\n              _content = output.code;\n            }\n          }\n        }\n        // append\n        result += _content + '\\n';\n      }\n      // save\n      const sha = shajs('sha256').update(result).digest('hex');\n      // dest\n      const fileDest = `assets/${type.toLowerCase()}/${sha}.${type.toLowerCase()}`;\n      const pathDist = await this.getPathDist(site, site.language.current);\n      const fileWrite = path.join(pathDist, fileDest);\n      // write\n      await fse.outputFile(fileWrite, result);\n      // url\n      urlDest = this.getUrl(site, site.language.current, fileDest);\n      // cache\n      site._cache[type][cacheSha] = urlDest;\n    }\n    // replace\n    const regexp = new RegExp(`__${type}__`);\n    return content.replace(regexp, urlDest);\n  }\n\n  async _renderEnvs({ data, content }) {\n    // site\n    const site = data.site;\n    // env\n    const _env = {};\n    for (const name of Object.keys(data._envs)) {\n      let value;\n      const keys = name.split('.');\n      for (let index = keys.length - 1; index >= 0; index--) {\n        const key = keys[index];\n        value = value ? { [key]: value } : { [key]: data._envs[name] };\n      }\n      extend(true, _env, value);\n    }\n    // combine\n    const env = extend(true, site.front.env, _env);\n    // front.envs\n    if (site.front.envs) {\n      env.envs = site.front.envs;\n    }\n    // article\n    if (data.article) {\n      env.article = extend(true, {}, data.article);\n      // delete\n      env.article.summary = undefined;\n      env.article.content = undefined;\n      env.article.html = undefined;\n      env.article.contentSearch = undefined;\n    }\n    // replace\n    const text = `\n<script type=\"text/javascript\">\nvar env=${JSON.stringify(env, null, 2)};\n</script>\n`;\n    const regexp = new RegExp('__ENV__');\n    const res = content.replace(regexp, text);\n    // remove article\n    env.article = undefined;\n    // ok\n    return res;\n  }\n\n  resolvePath(pathRoot, fileCurrent, fileName) {\n    if (!fileName) return pathRoot;\n    if (fileName.charAt(0) === '.') return path.join(path.dirname(fileCurrent), fileName); // not use path.resolve\n    return path.join(pathRoot, fileName);\n  }\n\n  getOptions() {\n    return {\n      async: true,\n      cache: true,\n      compileDebug: this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal,\n      outputFunctionName: 'echo',\n      rmWhitespace: true,\n    };\n  }\n\n  async getData({ site }) {\n    // data\n    const self = this;\n    const _csses = [];\n    const _jses = [];\n    const _envs = {};\n    let _pathIntermediate = await this.getPathIntermediate(site.language.current);\n    _pathIntermediate = path.join(_pathIntermediate, '/');\n    return {\n      ctx: self.ctx,\n      site,\n      _csses,\n      _jses,\n      _envs,\n      require(fileName) {\n        const _path = self.resolvePath('', this._filename, fileName);\n        return require3(_path);\n      },\n      url(fileName, language) {\n        if (fileName && (fileName.indexOf('http://') === 0 || fileName.indexOf('https://') === 0)) return utils.escapeURL(fileName);\n        let _path = self.resolvePath('', path.relative(_pathIntermediate, this._filename), fileName);\n        _path = _path.replace(/\\\\/gi, '/');\n        const _url = self.getUrl(site, language || site.language.current, _path);\n        return utils.escapeURL(_url);\n      },\n      css(fileName) {\n        _csses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n      },\n      js(fileName) {\n        _jses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n      },\n      env(name, value) {\n        _envs[name] = value;\n      },\n      text(...args) {\n        return this.ctx.text.locale(site.language.current, ...args);\n      },\n      util: {\n        time,\n        formatDateTime(date) {\n          return this.time.formatDateTime(date, `${site.env.format.date} ${site.env.format.time}`);\n        },\n        safeHtml(str) {\n          return self.ctx.helper.shtml(str);\n        },\n        escapeHtml(str) {\n          return utils.escapeHtml(str);\n        },\n        escapeURL(str) {\n          return utils.escapeURL(str);\n        },\n      },\n    };\n  }\n\n\n  // //////////////////////////////// build\n\n  // build languages\n  async buildLanguages({ progressId, progressNo = 0 }) {\n    try {\n      // time start\n      const timeStart = new Date();\n      // site\n      const site = await this.combineSiteBase();\n      const languages = site.language.items.split(',');\n\n      // progress\n      const progress0_Total = languages.length;\n      let progress0_progress = 0;\n\n      for (const language of languages) {\n        // progress: language\n        if (progressId) {\n          await this.ctx.meta.progress.update({\n            progressId,\n            progressNo,\n            total: progress0_Total,\n            progress: progress0_progress++,\n            text: `${this.ctx.text('Build')} ${this.ctx.text(language)}`,\n          });\n        }\n\n        // build\n        await this.buildLanguage({ language, progressId, progressNo: progressNo + 1 });\n      }\n\n      // time end\n      const timeEnd = new Date();\n      const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n\n      // progress: done\n      if (progressId) {\n        if (progressNo === 0) {\n          await this.ctx.meta.progress.done({\n            progressId,\n            message: `${this.ctx.text('Time Used')}: ${parseInt(time)}${this.ctx.text('second2')}`,\n          });\n        }\n      }\n\n      // ok\n      return {\n        time,\n      };\n    } catch (err) {\n      // error\n      if (progressId) {\n        if (progressNo === 0) {\n          await this.ctx.meta.progress.error({ progressId, message: err.message });\n        }\n      }\n      throw err;\n    }\n  }\n\n  // build language\n  async buildLanguage({ language, progressId, progressNo = 0 }) {\n    try {\n      // time start\n      const timeStart = new Date();\n\n      // progress\n      const progress0_Total = 2;\n      let progress0_progress = 0;\n      // progress: initialize\n      if (progressId) {\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total: progress0_Total,\n          progress: progress0_progress++,\n          text: this.ctx.text('Initialize'),\n        });\n      }\n\n      // site\n      const site = await this.getSite({ language });\n\n      // / clear\n\n      // intermediate\n      const pathIntermediate = await this.getPathIntermediate(language);\n      await fse.remove(pathIntermediate);\n\n      // dist\n      const pathDist = await this.getPathDist(site, language);\n      //   solution: 1\n      // const distPaths = [ 'articles', 'assets', 'plugins', 'static', 'index.html', 'robots.txt', 'sitemap.xml', 'sitemapindex.xml' ];\n      // for (const item of distPaths) {\n      //   await fse.remove(path.join(pathDist, item));\n      // }\n      //   solution: 2\n      const distFiles = await bb.fromCallback(cb => {\n        glob(`${pathDist}/\\*`, cb);\n      });\n      const languages = site.language.items.split(',');\n      for (const item of distFiles) {\n        if (languages.indexOf(path.basename(item)) === -1) {\n          await fse.remove(item);\n        }\n      }\n\n      // / copy files to intermediate\n      // /  plugins<theme<custom\n\n      // plugins\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin) {\n          const pluginPath = path.join(module.root, 'backend/cms/plugin');\n          const pluginFiles = await bb.fromCallback(cb => {\n            glob(`${pluginPath}/\\*`, cb);\n          });\n          for (const item of pluginFiles) {\n            await fse.copy(item, path.join(pathIntermediate, 'plugins', relativeName, path.basename(item)));\n          }\n        }\n      }\n\n      // theme\n      if (!site.themes[language]) this.ctx.throw(1002, this.atomClass.module, this.atomClass.atomClassName, language);\n      await this.copyThemes(pathIntermediate, site.themes[language]);\n\n      // custom\n      const customPath = await this.getPathCustom(language);\n      const customFiles = await bb.fromCallback(cb => {\n        glob(`${customPath}/\\*`, cb);\n      });\n      for (const item of customFiles) {\n        await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n      }\n\n      // intermediate dist\n      const intermediateDistFiles = await bb.fromCallback(cb => {\n        glob(`${pathIntermediate}/dist/\\*`, cb);\n      });\n      for (const item of intermediateDistFiles) {\n        await fse.copy(item, path.join(pathDist, path.basename(item)));\n      }\n\n      // / copy files to dist (ignore .ejs)\n      // /  assets plugins/[plugin]/assets\n      for (const dir of [ 'assets', 'plugins' ]) {\n        if (dir === 'assets') {\n          // assets\n          const _filename = path.join(pathIntermediate, 'assets');\n          const exists = await fse.pathExists(_filename);\n          if (exists) {\n            await fse.copy(_filename, path.join(pathDist, 'assets'));\n          }\n        } else {\n          // plugins\n          const pluginsFiles = await bb.fromCallback(cb => {\n            glob(`${pathIntermediate}/plugins/\\*`, cb);\n          });\n          for (const item of pluginsFiles) {\n            const _filename = `${item}/assets`;\n            const exists = await fse.pathExists(_filename);\n            if (exists) {\n              await fse.copy(_filename, path.join(pathDist, 'plugins', path.basename(item), 'assets'));\n            }\n          }\n        }\n        // delete ejs files\n        const ejsFiles = await bb.fromCallback(cb => {\n          glob(`${pathDist}/${dir}/\\*\\*/\\*.ejs`, cb);\n        });\n        for (const item of ejsFiles) {\n          await fse.remove(item);\n        }\n      }\n\n      // / robots.txt\n      await this.createRobots({ site });\n\n      // / sitemapIndex\n      await this.createSitemapIndex({ site });\n\n      // progress: render files\n      if (progressId) {\n        await this.ctx.meta.progress.update({\n          progressId,\n          progressNo,\n          total: progress0_Total,\n          progress: progress0_progress++,\n          text: this.ctx.text('Render Files'),\n        });\n      }\n\n      // render all files\n      await this.renderAllFiles({ language, progressId, progressNo: progressNo + 1 });\n\n      // time end\n      const timeEnd = new Date();\n      const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n\n      // progress: done\n      if (progressId) {\n        if (progressNo === 0) {\n          await this.ctx.meta.progress.done({\n            progressId,\n            message: `${this.ctx.text('Time Used')}: ${parseInt(time)}${this.ctx.text('second2')}`,\n          });\n        }\n      }\n\n      // ok\n      return {\n        time,\n      };\n    } catch (err) {\n      // error\n      if (progressId) {\n        if (progressNo === 0) {\n          await this.ctx.meta.progress.error({ progressId, message: err.message });\n        }\n      }\n      throw err;\n    }\n  }\n\n  // register watchers\n  async registerWatchers() {\n    // info\n    const watcherInfos = [];\n    // site\n    const site = await this.combineSiteBase();\n    const languages = site.language.items.split(',');\n    // loop languages\n    for (const language of languages) {\n      // info\n      const watcherInfo = await this._collectWatcher({ language });\n      watcherInfos.push(watcherInfo);\n    }\n    // register\n    this.app.meta['a-cms:watcher'].registerLanguages({\n      info: {\n        subdomain: this.ctx.subdomain,\n        atomClass: this.atomClass,\n      },\n      watcherInfos,\n    });\n  }\n\n  async registerWatcher({ language }) {\n    // info\n    const watcherInfo = await this._collectWatcher({ language });\n    // register\n    this.app.meta['a-cms:watcher'].register(watcherInfo);\n  }\n\n  async _collectWatcher({ language }) {\n    // site\n    const site = await this.getSite({ language });\n\n    // watcher\n    site._watchers = [];\n\n    // / files\n    // /  plugins<theme<custom\n\n    // plugins\n    for (const relativeName in this.app.meta.modules) {\n      const module = this.app.meta.modules[relativeName];\n      if (!module.info.public && module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin) {\n        site._watchers.push(path.join(module.root, 'backend/cms'));\n        // site._watchers.push(path.join(module.root, 'backend/src'));\n      }\n    }\n\n    // theme\n    if (!site.themes[language]) this.ctx.throw(1002, this.atomClass.module, this.atomClass.atomClassName, language);\n    this.watcherThemes(site, site.themes[language]);\n\n    // custom\n    const customPath = await this.getPathCustom(language);\n    site._watchers.push(customPath);\n\n    // watcherInfo\n    return {\n      subdomain: this.ctx.subdomain,\n      atomClass: this.atomClass,\n      language,\n      watchers: site._watchers,\n    };\n  }\n\n  async createSitemapIndex({ site }) {\n    // content\n    const urlRawRoot = this.getUrlRawRoot(site);\n    let items = '';\n    for (const language of site.language.items.split(',')) {\n      items +=\n`  <sitemap>\n    <loc>${urlRawRoot}${language === site.language.default ? '' : '/' + language}/sitemap.xml</loc>\n  </sitemap>\n`;\n    }\n    const content =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${items}</sitemapindex>`;\n      // write\n    const pathRawDist = await this.getPathRawDist(site);\n    await fse.outputFile(`${pathRawDist}/sitemapindex.xml`, content);\n  }\n\n  async createRobots({ site }) {\n    // content\n    const urlRawRoot = this.getUrlRawRoot(site);\n    const content =\n`User-agent: *\nAllow: /\n\nSitemap: ${urlRawRoot}/sitemapindex.xml\n`;\n    // write\n    const pathRawDist = await this.getPathRawDist(site);\n    await fse.outputFile(`${pathRawDist}/robots.txt`, content);\n  }\n\n  // theme extend\n  async copyThemes(pathIntermediate, themeModuleName) {\n    await this._copyThemes(pathIntermediate, themeModuleName);\n  }\n\n  async _copyThemes(pathIntermediate, themeModuleName) {\n    // module\n    const module = this.app.meta.modules[themeModuleName];\n    if (!module) this.ctx.throw(1003, themeModuleName);\n    // extend\n    const moduleExtend = module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.extend;\n    if (moduleExtend) {\n      await this._copyThemes(pathIntermediate, moduleExtend);\n    }\n    // current\n    const themePath = path.join(module.root, 'backend/cms/theme');\n    const themeFiles = await bb.fromCallback(cb => {\n      glob(`${themePath}/\\*`, cb);\n    });\n    for (const item of themeFiles) {\n      await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n    }\n  }\n\n  // theme extend\n  watcherThemes(site, themeModuleName) {\n    this._watcherThemes(site, themeModuleName);\n  }\n\n  _watcherThemes(site, themeModuleName) {\n    // module\n    const module = this.app.meta.modules[themeModuleName];\n    if (!module) this.ctx.throw(1003, themeModuleName);\n    // extend\n    const moduleExtend = module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.extend;\n    if (moduleExtend) {\n      this._watcherThemes(site, moduleExtend);\n    }\n    // current\n    if (!module.info.public) {\n      site._watchers.push(path.join(module.root, 'backend/cms'));\n      // site._watchers.push(path.join(module.root, 'backend/src'));\n    }\n  }\n\n  async getArticleUrl({ key }) {\n    // article\n    const article = await this.ctx.service.article._getArticle({ key, inner: true });\n    if (!article) return;\n    // site\n    const site = await this.getSite({ language: article.language });\n    // check if build site first\n    const pathIntermediate = await this.getPathIntermediate(article.language);\n    const fileName = path.join(pathIntermediate, 'main/article.ejs');\n    const exists = await fse.pathExists(fileName);\n    if (!exists) this.ctx.throw(1006);\n    // url\n    return {\n      relativeUrl: article.url,\n      url: this.getUrl(site, site.language.current, article.url),\n    };\n  }\n\n  getAtomClassFullName(atomClass) {\n    return `${atomClass.module}:${atomClass.atomClassName}:${atomClass.atomClassIdParent}`;\n  }\n\n  async getFrontEnvs({ language }) {\n    const envs = {};\n    for (const module of this.ctx.app.meta.modulesArray) {\n      if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.site) {\n        // may be more atoms\n        for (const key in module.main.meta.base.atoms) {\n          if (module.main.meta.base.atoms[key].info.cms === false) continue;\n          // atomClass\n          const atomClass = {\n            module: module.info.relativeName,\n            atomClassName: key,\n            atomClassIdParent: 0,\n          };\n          const atomClassFullName = this.getAtomClassFullName(atomClass);\n          if (this.getAtomClassFullName(this.atomClass) !== atomClassFullName) {\n            // getSite\n            let site;\n            try {\n              site = await this.ctx.performAction({\n                method: 'post',\n                url: '/a/cms/site/getSite',\n                body: {\n                  atomClass,\n                  language,\n                  options: {\n                    envs: false,\n                  },\n                },\n              });\n            } catch (e) {\n              // nothing\n            }\n            // set\n            if (site) {\n              envs[atomClassFullName] = site.front.env;\n            }\n          }\n        }\n      }\n    }\n    return envs;\n  }\n\n}\n\nmodule.exports = {\n  create(ctx, atomClass) {\n    return new Build(ctx, atomClass);\n  },\n};\n\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\nconst WatcherFn = require('./common/watcher.js');\n\nmodule.exports = app => {\n\n  // watcher: only in development\n  if (app.meta.isLocal) {\n    app.meta['a-cms:watcher'] = new (WatcherFn(app))();\n  }\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // queues\n  config.queues = {\n    render: {\n      path: 'queue/render',\n    },\n  };\n\n  // startups\n  config.startups = {\n    registerAllWatchers: {\n      type: 'worker',\n      instance: true,\n      path: 'site/registerAllWatchers',\n    },\n  };\n\n  // article\n  config.article = {\n    trim: {\n      limit: 100,\n      wordBreak: false,\n      preserveTags: false,\n    },\n    // publishOnSubmit: true,\n  };\n\n  // checkFile\n  config.checkFile = {\n    timeout: 1000,\n    timeoutDelay: 5000,\n  };\n\n  // site\n  config.site = {\n    base: {\n      title: 'my blog',\n      subTitle: 'gone with the wind',\n      description: '',\n      keywords: '',\n      publishOnSubmit: true,\n    },\n    host: {\n      url: 'http://example.com',\n      rootPath: '',\n    },\n    language: {\n      default: 'en-us',\n      items: 'en-us',\n    },\n    themes: {\n      'en-us': 'cms-themeblog',\n    },\n    edit: {\n      mode: 1, // markdown\n    },\n    env: {\n      format: {\n        date: 'YYYY-MM-DD',\n        time: 'HH:mm:ss',\n      },\n      article2: {\n        recentNum: 5,\n      },\n      comment: {\n        order: 'asc',\n        recentNum: 5,\n      },\n      brother: {\n        order: 'desc',\n      },\n      loadMore: {\n        loadOnScroll: false,\n      },\n    },\n    profile: {\n      userName: 'zhennann',\n      motto: 'Less is more, while more is less.',\n      avatar: 'assets/images/avatar.jpg',\n      url: 'index.html',\n      extra: '',\n    },\n  };\n\n  //\n  return config;\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'en-us': 'English',\n  'zh-cn': 'Chinese',\n  PersonalProfile: 'Profile',\n  AuthorProfile: 'Author Profile',\n  ArticlePrevious: 'Previous',\n  ArticleNext: 'Next',\n  second2: 's',\n};\n","module.exports = {\n  All: '所有',\n  Article: '文章',\n  Catalog: '目录',\n  Category: '目录',\n  Categories: '目录',\n  Comment: '评论',\n  Comments: '评论',\n  Language: '语言',\n  Publish: '发布',\n  Publishing: '发布中',\n  Published: '已发布',\n  Search: '搜索',\n  Submit: '提交',\n  Sorting: '排序',\n  Tag: '标签',\n  Tags: '标签',\n  Url: '链接',\n  'Are you sure?': '您确认吗？',\n  'Article List': '文章清单',\n  'Article List(by category)': '文章清单(按目录)',\n  'Category name': '目录名称',\n  'Comment Disabled': '禁止评论',\n  'Create Article': '新建文章',\n  'Language must not be empty': '语言不允许为空',\n  'Load More': '加载更多',\n  'Post Comment': '发表评论',\n  'Recent Comments': '最近评论',\n  'Theme %s:%s:%s not set': '没有设置主题%s:%s:%s',\n  'Theme %s not found': '没有找到主题%s',\n  'en-us': '英语',\n  'zh-cn': '简体中文',\n  PersonalProfile: '个人信息',\n  AuthorProfile: '作者信息',\n  ArticlePrevious: '前一篇',\n  ArticleNext: '后一篇',\n  Yes: '是',\n  No: '否',\n  Sticky: '置顶',\n  Initialize: '初始化',\n  'Render Files': '渲染文件',\n  'Time Used': '用时',\n  seconds: '秒',\n  second2: '秒',\n  Build: '构建',\n  Block: '区块',\n  'Slug Exists': 'Slug已存在',\n  'Build Site First': '请先构建站点',\n  'Cannot delete if has children': '有子元素时不允许删除',\n  'Cannot delete if has articles': '有文章时不允许删除',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Language must not be empty',\n  1002: 'Theme %s:%s:%s not set',\n  1003: 'Theme %s not found',\n  1004: 'Cannot delete if has children',\n  1005: 'Cannot delete if has articles',\n  1006: 'Build Site First',\n};\n","module.exports = {\n};\n","const require3 = require('require3');\nconst chokidar = require3('chokidar');\nconst debounce = require3('debounce');\n\nmodule.exports = function(app) {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Watcher {\n\n    constructor() {\n      this._watchers = {};\n      this._init();\n    }\n\n    _init() {\n      if (app.meta.inApp) {\n        // app\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherChange',\n          handler: async info => {\n            await this._change(info);\n          },\n        });\n      } else {\n        // agent\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherRegister',\n          handler: info => {\n            this._register(info);\n          },\n        });\n        app.meta.messenger.addProvider({\n          name: 'a-cms:watcherRegisterLanguages',\n          handler: info => {\n            this._registerLanguages(info);\n          },\n        });\n      }\n    }\n\n    // called by app\n    register(info) {\n      app.meta.messenger.callAgent({ name: 'a-cms:watcherRegister', data: info });\n    }\n\n    // called by app\n    registerLanguages(info) {\n      app.meta.messenger.callAgent({ name: 'a-cms:watcherRegisterLanguages', data: info });\n    }\n\n    // invoked in agent\n    _registerLanguages({ info, watcherInfos }) {\n      // key\n      const atomClasskey = JSON.stringify(info.atomClass);\n      // clear\n      const _arr = this._watchers.geto(info.subdomain).geto(info.atomClass.module).geto(atomClasskey);\n      for (const language in _arr) {\n        const watcherEntry = _arr[language];\n        if (watcherEntry.watcher) {\n          watcherEntry.watcher.close();\n          watcherEntry.watcher = null;\n        }\n      }\n      // register\n      for (const watcherInfo of watcherInfos) {\n        this._register(watcherInfo);\n      }\n    }\n\n    // invoked in agent\n    _register({ subdomain, atomClass, language, watchers }) {\n      // key\n      const atomClasskey = JSON.stringify(atomClass);\n      // watcherEntry\n      const watcherEntry = this._watchers\n        .geto(subdomain).geto(atomClass.module).geto(atomClasskey)\n        .geto(language);\n      if (watcherEntry.watcher) {\n        watcherEntry.watcher.close();\n        watcherEntry.watcher = null;\n      } else {\n        watcherEntry.info = { subdomain, atomClass, language, watchers };\n      }\n      // watcher\n      watcherEntry.watcher = chokidar.watch(watchers)\n        .on('change', debounce(function() {\n          app.meta.messenger.callRandom({\n            name: 'a-cms:watcherChange',\n            data: { subdomain, atomClass, language },\n          });\n        }, 300));\n    }\n\n    // invoked in app\n    async _change({ subdomain, atomClass, language }) {\n      app.meta.queue.push({\n        subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguage',\n          atomClass,\n          language,\n        },\n      });\n    }\n\n  }\n\n  return Watcher;\n};\n","const version = require('./controller/version.js');\nconst article = require('./controller/article.js');\nconst category = require('./controller/category.js');\nconst render = require('./controller/render.js');\nconst site = require('./controller/site.js');\nconst tag = require('./controller/tag.js');\nconst comment = require('./controller/comment.js');\nconst rss = require('./controller/rss.js');\nconst queue = require('./controller/queue.js');\nconst event = require('./controller/event.js');\n\nmodule.exports = app => {\n  let routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // article\n    { method: 'post', path: 'article/create', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/read', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/select', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/write', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/delete', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/action', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/enable', controller: article, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'article/list', controller: article },\n    { method: 'post', path: 'article/attachments', controller: article },\n    // comment\n    { method: 'post', path: 'comment/all', controller: comment },\n    // render\n    { method: 'post', path: 'render/getArticleUrl', controller: render,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    // site\n    { method: 'post', path: 'site/getSite', controller: site, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'site/getConfigSiteBase', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigSite', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/setConfigSite', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigLanguagePreview', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigLanguage', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/setConfigLanguage', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/buildLanguage', controller: site, middlewares: 'progress', meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/buildLanguages', controller: site, middlewares: 'progress', meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getLanguages', controller: site },\n    { method: 'post', path: 'site/getUrl', controller: site },\n    { method: 'post', path: 'site/getBlocks', controller: site },\n    { method: 'post', path: 'site/getBlockArray', controller: site },\n    { method: 'post', path: 'site/blockSave', controller: site },\n    { method: 'post', path: 'site/registerAllWatchers', controller: site, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'site/getStats', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    // category\n    { method: 'post', path: 'category/item', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/save', controller: category, middlewares: 'validate', meta: {\n      validate: { validator: 'category' },\n      right: { type: 'function', module: 'a-settings', name: 'settings' },\n    } },\n    { method: 'post', path: 'category/tree', controller: category }, // not set function right\n    { method: 'post', path: 'category/children', controller: category }, // not set function right\n    { method: 'post', path: 'category/add', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/delete', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/move', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/relativeTop', controller: category }, // not set function right\n    // tag\n    { method: 'post', path: 'tag/list', controller: tag },\n    // rss\n    { method: 'get', path: 'rss/feed/article/comments/:atomId', controller: rss, action: 'articleComments' },\n    { method: 'get', path: 'rss/feed/comments/:module/:atomClassName/:language', controller: rss, action: 'feedComments' },\n    { method: 'get', path: 'rss/feed/:module/:atomClassName/:language', controller: rss, action: 'feed' },\n    // queue\n    { method: 'post', path: 'queue/render', controller: queue, middlewares: 'inner,progress',\n      meta: { auth: { enable: false } },\n    },\n    // event\n    { method: 'post', path: 'event/atomClassValidator', controller: event, middlewares: 'inner', meta: { auth: { enable: false } } },\n  ];\n  if (app.meta.isTest || app.meta.isLocal) {\n    routes = routes.concat([\n      // site\n      { method: 'post', path: 'site/checkFile', controller: site },\n    ]);\n  }\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst utils = require('../common/utils.js');\n\nmodule.exports = app => {\n\n  class ArticleController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.article.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.article.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.article.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.article.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.article.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.article.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.article.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    // list\n    async list() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // options\n      const options = this.ctx.request.body.options;\n      // user\n      const user = this.ctx.user.op;\n      // select\n      // filter drafts\n      options.where = extend(true, options.where, {\n        'a.atomEnabled': 1, // normal mode\n        'a.atomFlag': 2, // published\n      });\n      // select\n      options.page = this.ctx.meta.util.page(options.page, false);\n      const items = await this.ctx.meta.atom.select({ atomClass, options, user, pageForce: false });\n      // ok\n      this.ctx.successMore(items, options.page.index, options.page.size);\n    }\n\n    // attachments\n    async attachments() {\n      // key\n      const key = this.ctx.request.body.key;\n      // options\n      const options = this.ctx.request.body.options || {};\n      // filter drafts\n      options.where = extend(true, options.where, {\n        mode: 2,\n        attachment: 1,\n      });\n      if (!options.orders) {\n        options.orders = [\n          [ 'realName', 'asc' ],\n        ];\n      }\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/file/file/list',\n        body: {\n          key,\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return ArticleController;\n};\n\n","module.exports = app => {\n\n  class CategoryController extends app.Controller {\n\n    async item() {\n      // need not param:atomClass\n      const data = await this.ctx.service.category.item({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(data);\n    }\n\n    async save() {\n      // need not param:atomClass\n      const res = await this.ctx.service.category.save({\n        categoryId: this.ctx.request.body.categoryId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async tree() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.category.tree({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        hidden: this.ctx.request.body.hidden,\n        flag: this.ctx.request.body.flag,\n      });\n      this.ctx.success({ list });\n    }\n\n    async children() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.category.children({\n        atomClass,\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        hidden: this.ctx.request.body.hidden,\n        flag: this.ctx.request.body.flag,\n      });\n      this.ctx.success({ list });\n    }\n\n    async add() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.category.add({\n        atomClass,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      // need not param:atomClass\n      const res = await this.ctx.service.category.delete({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      // need not param:atomClass\n      const res = await this.ctx.service.category.move({\n        categoryId: this.ctx.request.body.categoryId,\n        categoryIdParent: this.ctx.request.body.categoryIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n    async relativeTop() {\n      // need not param:atomClass\n      const res = await this.ctx.service.category.relativeTop({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CategoryController;\n};\n\n","module.exports = app => {\n\n  class RenderController extends app.Controller {\n\n    async getArticleUrl() {\n      const res = await this.ctx.service.render.getArticleUrl({\n        atomClass: this.ctx.request.body.atomClass,\n        key: this.ctx.request.body.key,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return RenderController;\n};\n\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class SiteController extends app.Controller {\n\n    async getSite() {\n      // not log the error\n      try {\n        const atomClass = this.ctx.request.body.atomClass;\n        const site = await this.ctx.service.site.getSite({\n          atomClass,\n          language: this.ctx.request.body.language,\n          options: this.ctx.request.body.options,\n        });\n        this.ctx.success(site);\n      } catch (err) {\n        this.ctx.fail(err);\n      }\n    }\n\n    async getConfigSiteBase() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigSiteBase({ atomClass });\n      this.ctx.success({ data });\n    }\n\n    async getConfigSite() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigSite({ atomClass });\n      this.ctx.success({ data });\n    }\n\n    async setConfigSite() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.setConfigSite({\n        atomClass,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async getConfigLanguagePreview() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigLanguagePreview({\n        atomClass,\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async getConfigLanguage() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const data = await this.ctx.service.site.getConfigLanguage({\n        atomClass,\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async setConfigLanguage() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.setConfigLanguage({\n        atomClass,\n        language: this.ctx.request.body.language,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async buildLanguage() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      const language = this.ctx.request.body.language;\n      // progress\n      const progressId = await this.ctx.meta.progress.create();\n      // build\n      this.ctx.service.site.buildLanguageQueue({ atomClass, language, progressId });\n      this.ctx.success({ progressId });\n    }\n\n    async buildLanguages() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // progress\n      const progressId = await this.ctx.meta.progress.create();\n      // build\n      this.ctx.service.site.buildLanguagesQueue({ atomClass, progressId });\n      this.ctx.success({ progressId });\n    }\n\n    async getLanguages() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getLanguages({ atomClass });\n      this.ctx.success(res);\n    }\n\n    async getUrl() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getUrl({\n        atomClass,\n        language: this.ctx.request.body.language,\n        path: this.ctx.request.body.path,\n      });\n      this.ctx.success(res);\n    }\n\n    async checkFile() {\n      const res = await this.ctx.service.site.checkFile({\n        file: this.ctx.request.body.file,\n        mtime: this.ctx.request.body.mtime,\n      });\n      this.ctx.success(res);\n    }\n\n    async getBlocks() {\n      const res = await this.ctx.service.site.getBlocks({\n        locale: this.ctx.locale,\n      });\n      this.ctx.success(res);\n    }\n\n    async getBlockArray() {\n      const res = await this.ctx.service.site.getBlockArray({\n        locale: this.ctx.locale,\n      });\n      this.ctx.success(res);\n    }\n\n    async blockSave() {\n      const res = await this.ctx.service.site.blockSave({\n        blockName: this.ctx.request.body.blockName,\n        item: this.ctx.request.body.item,\n      });\n      this.ctx.success(res);\n    }\n\n    async registerAllWatchers() {\n      await this.ctx.service.site.registerAllWatchers();\n      this.ctx.success();\n    }\n\n    async getStats() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const res = await this.ctx.service.site.getStats({\n        atomClass,\n        languages: this.ctx.request.body.languages,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return SiteController;\n};\n\n","module.exports = app => {\n\n  class TagController extends app.Controller {\n\n    async list() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const list = await this.ctx.service.tag.list({\n        atomClass,\n        options: this.ctx.request.body.options,\n      });\n      this.ctx.success({ list });\n    }\n\n  }\n  return TagController;\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\nconst utils = require('../common/utils.js');\n\nmodule.exports = app => {\n\n  class CommentController extends app.Controller {\n\n    async all() {\n      // atomClass\n      const atomClass = utils.atomClass(this.ctx.request.body.atomClass);\n      // options\n      const options = this.ctx.request.body.options;\n      // filter drafts\n      options.where = extend(true, options.where, {\n        'a.atomEnabled': 1,\n        'a.atomFlag': 2,\n      });\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/base/comment/all',\n        body: {\n          atomClass,\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CommentController;\n};\n","const Build = require('../common/build.js');\n\nmodule.exports = app => {\n\n  class RSSController extends app.Controller {\n\n    async feed() {\n      // params\n      //   module\n      const module = this.ctx.params.module;\n      //   atomClassName\n      const atomClassName = this.ctx.params.atomClassName;\n      //   language\n      const language = this.ctx.params.language;\n      // atomClass\n      const atomClass = { module, atomClassName };\n      // options\n      const options = {\n        where: {\n          'f.language': language,\n        },\n        orders: [\n          [ 'a.updatedAt', 'desc' ],\n        ],\n        page: { index: 0 },\n        mode: 'list',\n      };\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/cms/article/list',\n        body: { atomClass, options },\n      });\n      const list = res.list;\n      // build\n      const build = Build.create(this.ctx, atomClass);\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed =\n`<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[${site.base.title}]]></title>\n    <link>${build.getUrl(site, language, 'index.html')}</link>\n    <description><![CDATA[${site.base.description || site.base.subTitle}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const article of list) {\n        feed +=\n`\n    <item>\n      <title>\n        <![CDATA[\n          ${article.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, article.url)}\n      </link>\n      <description>\n        <![CDATA[\n          ${article.description || article.summary}\n        ]]>\n      </description>\n      <category><![CDATA[${article.categoryName}]]></category>\n      <pubDate>${article.updatedAt}</pubDate>\n      <dc:creator><![CDATA[${article.userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed +=\n`\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n\n    async feedComments() {\n      // params\n      //   module\n      const module = this.ctx.params.module;\n      //   atomClassName\n      const atomClassName = this.ctx.params.atomClassName;\n      //   language\n      const language = this.ctx.params.language;\n      // atomClass\n      const atomClass = { module, atomClassName };\n      // options\n      const options = {\n        orders: [\n          [ 'h_updatedAt', 'desc' ],\n        ],\n        page: { index: 0 },\n      };\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/cms/comment/all',\n        body: { atomClass, options },\n      });\n      const list = res.list;\n      // build\n      const build = Build.create(this.ctx, atomClass);\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed =\n`<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[Comments for ${site.base.title}]]></title>\n    <link>${build.getUrl(site, language, 'index.html')}</link>\n    <description><![CDATA[${site.base.description || site.base.subTitle}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const item of list) {\n        feed +=\n`\n    <item>\n      <title>\n        <![CDATA[\n          Comment on ${item.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, item.url)}#comments\n      </link>\n      <description>\n        <![CDATA[\n          ${item.h_summary}\n        ]]>\n      </description>\n      <pubDate>${item.h_updatedAt}</pubDate>\n      <dc:creator><![CDATA[${item.h_userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed +=\n`\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n\n    async articleComments() {\n      // atomId\n      const atomId = this.ctx.params.atomId;\n      // article\n      const article = await this.ctx.service.article._getArticle({ key: { atomId }, inner: false });\n      if (!article) this.ctx.throw.module('a-base', 1002);\n      // language\n      const language = article.language;\n      // options\n      const options = {\n        orders: [\n          [ 'updatedAt', 'desc' ],\n        ],\n        page: { index: 0 },\n      };\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/base/comment/list',\n        body: {\n          key: { atomId },\n          options,\n        },\n      });\n      const list = res.list;\n      // atomClass\n      const atomClass = await this.ctx.meta.atomClass.get({ id: article.atomClassId });\n      // build\n      const build = Build.create(this.ctx, atomClass);\n      // site\n      const site = await build.getSite({ language });\n      // feed\n      let feed =\n`<rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" version=\"2.0\">\n  <channel>\n    <title><![CDATA[Comments on: ${article.atomName}]]></title>\n    <link>${build.getUrl(site, language, article.url)}</link>\n    <description><![CDATA[${article.description || article.summary}]]></description>\n    <language>${language}</language>\n    <generator>https://cms.cabloy.com</generator>\n`;\n      for (const item of list) {\n        feed +=\n`\n    <item>\n      <title>\n        <![CDATA[\n          Comment on ${article.atomName}\n        ]]>\n      </title>\n      <link>\n        ${build.getUrl(site, language, article.url)}#comments\n      </link>\n      <description>\n        <![CDATA[\n          ${item.summary}\n        ]]>\n      </description>\n      <pubDate>${item.updatedAt}</pubDate>\n      <dc:creator><![CDATA[${item.userName}]]></dc:creator>\n    </item>\n`;\n      }\n      feed +=\n`\n  </channel>\n</rss>\n`;\n      // ok\n      this.ctx.status = 200;\n      this.ctx.body = feed;\n      this.ctx.set('content-type', 'application/rss+xml; charset=UTF-8');\n    }\n\n  }\n  return RSSController;\n};\n\n","module.exports = require(\"path\");","const _formatDateTime = function(date, fmt) { // original author: meizz\n  const o = {\n    'M+': date.getMonth() + 1, // month\n    'D+': date.getDate(), // day\n    'H+': date.getHours(), // hour\n    'm+': date.getMinutes(), // minute\n    's+': date.getSeconds(), // second\n    'Q+': Math.floor((date.getMonth() + 3) / 3), // quarter\n    S: date.getMilliseconds(), // millisecond\n  };\n  if (/(Y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n  for (const k in o) { if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length))); }\n  return fmt;\n};\n\nmodule.exports = {\n  now() {\n    return this.formatDateTime(null);\n  },\n  today() {\n    return this.formatDate(null);\n  },\n  formatDateTime(date, fmt) {\n    date = date || new Date();\n    if (typeof (date) !== 'object') date = new Date(date);\n    fmt = fmt || 'YYYY-MM-DD HH:mm:ss';\n    return _formatDateTime(date, fmt);\n  },\n  formatDate(date, sep) {\n    sep = sep || '-';\n    return this.formatDateTime(date, `YYYY${sep}MM${sep}DD`);\n  },\n  formatTime(date, sep) {\n    sep = sep || ':';\n    return this.formatDateTime(date, `HH${sep}mm${sep}ss`);\n  },\n};\n","const Build = require('../common/build.js');\n\nmodule.exports = app => {\n\n  class QueueController extends app.Controller {\n\n    async render() {\n      const queueAction = this.ctx.request.body.queueAction;\n      await this[queueAction]();\n    }\n\n    async buildLanguage() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const language = this.ctx.request.body.language;\n      const progressId = this.ctx.request.body.progressId;\n\n      const build = Build.create(this.ctx, atomClass);\n      const res = await build.buildLanguage({ language, progressId });\n      this.ctx.success(res);\n    }\n\n    async buildLanguages() {\n      const atomClass = this.ctx.request.body.atomClass;\n      const progressId = this.ctx.request.body.progressId;\n\n      const build = Build.create(this.ctx, atomClass);\n      const res = await build.buildLanguages({ progressId });\n      this.ctx.success(res);\n    }\n\n    async renderArticle() {\n      const res = await this.ctx.service.render.renderArticle({\n        atomClass: this.ctx.request.body.atomClass,\n        key: this.ctx.request.body.key,\n        inner: this.ctx.request.body.inner,\n      });\n      this.ctx.success(res);\n    }\n\n    async deleteArticle() {\n      const res = await this.ctx.service.render.deleteArticle({\n        atomClass: this.ctx.request.body.atomClass,\n        key: this.ctx.request.body.key,\n        article: this.ctx.request.body.article,\n        inner: this.ctx.request.body.inner,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return QueueController;\n};\n","module.exports = app => {\n\n  class EventController extends app.Controller {\n\n    async atomClassValidator() {\n      const res = await this.ctx.service.event.atomClassValidator({\n        event: this.ctx.request.body.event,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return EventController;\n};\n","const version = require('./service/version.js');\nconst article = require('./service/article.js');\nconst category = require('./service/category.js');\nconst render = require('./service/render.js');\nconst site = require('./service/site.js');\nconst tag = require('./service/tag.js');\nconst event = require('./service/event.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    article,\n    category,\n    render,\n    site,\n    tag,\n    event,\n  };\n  return services;\n};\n","const require3 = require('require3');\nconst uuid = require3('uuid');\nconst utils = require('../common/utils.js');\n\nmodule.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aCmsArticle\n        let sql = `\n          CREATE TABLE aCmsArticle (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            categoryId int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            sticky int(11) DEFAULT '0',\n            keywords varchar(255) DEFAULT NULL,\n            description text DEFAULT NULL,\n            summary text DEFAULT NULL,\n            url varchar(255) DEFAULT NULL,\n            editMode int(11) DEFAULT '0',\n            slug varchar(255) DEFAULT NULL,\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            extra json DEFAULT NULL,\n            imageFirst varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsContent\n        sql = `\n          CREATE TABLE aCmsContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            content LONGTEXT DEFAULT NULL,\n            html LONGTEXT DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsCategory\n        sql = `\n          CREATE TABLE aCmsCategory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            categoryName varchar(50) DEFAULT NULL,\n            language varchar(50) DEFAULT NULL,\n            catalog int(11) DEFAULT '0',\n            hidden int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            categoryIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleView\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewFull\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n      if (options.version === 2) {\n        // create table: aCmsTag\n        let sql = `\n          CREATE TABLE aCmsTag (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            tagName varchar(50) DEFAULT NULL,\n            articleCount int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsArticleTag\n        sql = `\n          CREATE TABLE aCmsArticleTag (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            tags JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsArticleTagRef\n        sql = `\n          CREATE TABLE aCmsArticleTagRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            tagId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleView\n        await this.ctx.model.query('drop view aCmsArticleView');\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewFull\n        await this.ctx.model.query('drop view aCmsArticleViewFull');\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewSearch\n        sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewTag\n        sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n      if (options.version === 3) {\n        // alter table: aCmsArticle\n        let sql = `\n        ALTER TABLE aCmsArticle\n          ADD COLUMN audioFirst varchar(255) DEFAULT NULL,\n          ADD COLUMN audioCoverFirst varchar(255) DEFAULT NULL\n                  `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleView\n        await this.ctx.model.query('drop view aCmsArticleView');\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewFull\n        await this.ctx.model.query('drop view aCmsArticleViewFull');\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewSearch\n        await this.ctx.model.query('drop view aCmsArticleViewSearch');\n        sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewTag\n        await this.ctx.model.query('drop view aCmsArticleViewTag');\n        sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 4) {\n        // alter table: aCmsCategory\n        const sql = `\n        ALTER TABLE aCmsCategory\n          ADD COLUMN url varchar(255) DEFAULT NULL\n                  `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 5) {\n        // alter table: aCmsCategory\n        let sql = `\n        ALTER TABLE aCmsCategory\n          ADD COLUMN atomClassId int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n        // alter table: aCmsTag\n        sql = `\n        ALTER TABLE aCmsTag\n          ADD COLUMN atomClassId int(11) DEFAULT '0'\n                  `;\n        await this.ctx.model.query(sql);\n      }\n\n      if (options.version === 6) {\n        // alter table: aCmsArticle\n        let sql = `\n        ALTER TABLE aCmsArticle\n          ADD COLUMN uuid varchar(50) DEFAULT NULL\n                  `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleView\n        await this.ctx.model.query('drop view aCmsArticleView');\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewFull\n        await this.ctx.model.query('drop view aCmsArticleViewFull');\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewSearch\n        await this.ctx.model.query('drop view aCmsArticleViewSearch');\n        sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewTag\n        await this.ctx.model.query('drop view aCmsArticleViewTag');\n        sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n        await this.ctx.model.query(sql);\n      }\n\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // create roles: cms-writer cms-publisher to template\n        const roles = [ 'cms-writer', 'cms-publisher' ];\n        const roleTemplate = await this.ctx.meta.role.getSystemRole({ roleName: 'template' });\n        const roleSuperuser = await this.ctx.meta.role.getSystemRole({ roleName: 'superuser' });\n        for (const roleName of roles) {\n          const roleId = await this.ctx.meta.role.add({\n            roleName,\n            roleIdParent: roleTemplate.id,\n          });\n          // role:superuser include cms-writer cms-publisher\n          await this.ctx.meta.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n        }\n        // build roles\n        await this.ctx.meta.role.setDirty(true);\n\n        // add role rights\n        const roleRights = [\n          { roleName: 'cms-writer', action: 'create' },\n          { roleName: 'cms-writer', action: 'write', scopeNames: 0 },\n          { roleName: 'cms-writer', action: 'delete', scopeNames: 0 },\n          { roleName: 'cms-writer', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'cms-publisher', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'cms-publisher', action: 'write', scopeNames: 'authenticated' },\n          { roleName: 'cms-publisher', action: 'publish', scopeNames: 'authenticated' },\n          { roleName: 'root', action: 'read', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.meta.role.addRoleRightBatch({ atomClassName: 'article', roleRights });\n\n      }\n\n      if (options.version === 5) {\n        // atomClass\n        const atomClass = await utils.atomClass2(this.ctx, null);\n        // update aCmsCategory's atomClassId\n        await this.ctx.model.query(\n          `update aCmsCategory set atomClassId=?\n             where iid=?`,\n          [ atomClass.id, this.ctx.instance.id ]);\n        // update aCmsTag's atomClassId\n        await this.ctx.model.query(\n          `update aCmsTag set atomClassId=?\n             where iid=?`,\n          [ atomClass.id, this.ctx.instance.id ]);\n      }\n\n      if (options.version === 6) {\n        // uuid\n        const articles = await this.ctx.model.article.select();\n        for (const article of articles) {\n          const uuid = this._parseUuid(article);\n          await this.ctx.model.article.update({\n            id: article.id,\n            uuid,\n          });\n        }\n      }\n\n    }\n\n    async test() {\n\n    }\n\n    _parseUuid(article) {\n      if (!article.url) return this._uuid();\n      const matches = article.url.match(/articles\\/(.*)\\.html/);\n      if (!matches) return this._uuid();\n      if (matches[1].length !== 32) return this._uuid();\n      return matches[1];\n    }\n\n    _uuid() {\n      return uuid.v4().replace(/-/g, '');\n    }\n\n  }\n\n  return Version;\n};\n","const require3 = require('require3');\nconst trimHtml = require3('@zhennann/trim-html');\nconst markdown = require3('@zhennann/markdown');\nconst markdonw_it_block = require3('@zhennann/markdown-it-block');\nconst uuid = require3('uuid');\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Article extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      const site = await this.ctx.service.render.combineSiteBase({ atomClass });\n      const editMode = site.edit.mode;\n      // add article\n      const params = {\n        atomId: key.atomId,\n        editMode,\n      };\n      if (item.language) params.language = item.language;\n      if (item.categoryId) params.categoryId = item.categoryId;\n      // uuid\n      params.uuid = item.uuid || uuid.v4().replace(/-/g, '');\n      // insert\n      const res = await this.ctx.model.article.insert(params);\n      const itemId = res.insertId;\n      // add content\n      await this.ctx.model.content.insert({\n        atomId: key.atomId,\n        itemId,\n        content: '',\n      });\n      return { atomId: key.atomId, itemId };\n    }\n\n    _getMeta(item, showSorting) {\n      // flags\n      const flags = [];\n      if (item.sticky) flags.push(this.ctx.text('Sticky'));\n      if (item.sorting && showSorting) flags.push(item.sorting);\n      // meta\n      const meta = {\n        summary: item.summary,\n        flags,\n      };\n      // ok\n      item._meta = meta;\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read: showSorting=true\n      this._getMeta(item, true);\n    }\n\n    async select({ atomClass, options, items, user }) {\n      const showSorting = options && options.where && options.where.categoryId;\n      // select\n      for (const item of items) {\n        this._getMeta(item, showSorting);\n      }\n    }\n\n    async write({ atomClass, key, item, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.meta.atom.read({ key, user });\n      // if undefined then old\n      const fields = [ 'slug', 'editMode', 'content', 'language', 'categoryId', 'sticky', 'keywords', 'description', 'sorting', 'flag', 'extra' ];\n      for (const field of fields) {\n        if (item[field] === undefined) item[field] = atomOld[field];\n      }\n\n      // url\n      let url;\n      if (item.slug) {\n        url = `articles/${item.slug}.html`;\n      } else {\n        url = `articles/${atomOld.uuid}.html`;\n      }\n      // image first\n      let imageFirst = '';\n      if (item.editMode === 1) {\n        const matches = item.content && item.content.match(/!\\[[^\\]]*?\\]\\(([^\\)]*?)\\)/);\n        imageFirst = (matches && matches[1]) || '';\n      }\n      // audio first\n      let audioFirst = '';\n      let audioCoverFirst = '';\n      if (item.editMode === 1) {\n        const matches = item.content && item.content.match(/\\$\\$\\$\\s*audio([\\s\\S]*?)\\$\\$\\$/);\n        let options = matches && matches[1];\n        if (options) {\n          options = JSON.parse(options);\n          if (options && options.audio) {\n            if (Array.isArray(options.audio)) {\n              audioFirst = options.audio[0].url;\n              audioCoverFirst = options.audio[0].cover;\n            } else {\n              audioFirst = options.audio.url;\n              audioCoverFirst = options.audio.cover;\n            }\n          }\n        }\n      }\n      // markdown\n      const md = markdown.create();\n      // markdown-it-block\n      const blocks = this.ctx.service.site.getBlocks({ locale: item.language });\n      // block options\n      const blockOptions = {\n        utils: {\n          text: (...args) => {\n            return this.ctx.text.locale(item.language, ...args);\n          },\n        },\n        blocks,\n      };\n      md.use(markdonw_it_block, blockOptions);\n      // html\n      let html;\n      if (item.editMode === 1) {\n        html = item.content ? md.render(item.content) : '';\n      } else {\n        html = item.content || '';\n      }\n      // summary\n      const summary = trimHtml(html, this.ctx.config.article.trim);\n      // update article\n      await this.ctx.model.article.update({\n        id: key.itemId,\n        language: item.language,\n        categoryId: item.categoryId,\n        sticky: item.sticky,\n        keywords: item.keywords,\n        description: item.description,\n        summary: summary.html,\n        url,\n        editMode: item.editMode,\n        slug: item.slug,\n        sorting: item.sorting,\n        flag: item.flag,\n        extra: item.extra || '{}',\n        imageFirst,\n        audioFirst,\n        audioCoverFirst,\n      });\n      // update content\n      await this.ctx.model.query('update aCmsContent a set a.content=?, a.html=? where a.iid=? and a.atomId=?',\n        [ item.content, html, this.ctx.instance.id, key.atomId ]);\n\n      // tags\n      const tagsNew = await this.ctx.service.tag.updateArticleTags({ atomClass, key, item });\n\n      // set tag count , force check if delete tags\n      // if (atomOld.atomFlag === 2) {\n      await this.ctx.service.tag.setTagArticleCount({ tagsNew, tagsOld: atomOld.tags });\n      // }\n\n      // render\n      await this._renderArticle({ atomClass, key, inner: atomOld.atomFlag !== 2 });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.meta.atom.read({ key, user });\n\n      // delete article\n      await this.ctx.model.article.delete({\n        id: key.itemId,\n      });\n      // delete content\n      await this.ctx.model.content.delete({\n        itemId: key.itemId,\n      });\n\n      // delete tags\n      await this.ctx.service.tag.deleteArticleTags({ key });\n\n      // set tag count , force check if delete tags\n      // if (atomOld.atomFlag === 2) {\n      await this.ctx.service.tag.setTagArticleCount({ tagsNew: null, tagsOld: atomOld.tags });\n      // }\n\n      // delete article\n      await this._deleteArticle({ atomClass, key, article: atomOld, inner: atomOld.atomFlag !== 2 });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // get atom for safety\n        const atomOld = await this.ctx.meta.atom.read({ key, user });\n\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n        // change flow\n        await this.ctx.meta.atom.flow({\n          key,\n          atom: { atomFlow: 0 },\n          user,\n        });\n\n        // tags\n        if (atomOld.atomFlag !== 2) {\n          await this.ctx.service.tag.setTagArticleCount({ tagsOld: atomOld.tags });\n        }\n\n        // render\n        await this._renderArticle({ atomClass, key, inner: false });\n      } else {\n        // other custom action\n        //   always render again\n        await this._renderArticle({ atomClass, key, inner: false });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n      // site\n      const site = await this.ctx.service.render.combineSiteBase({ atomClass });\n      // if (this.ctx.config.article.publishOnSubmit) {\n      if (site.base.publishOnSubmit !== false) {\n        // publish\n        await this.action({ action: 101, atomClass, key, user });\n      }\n    }\n\n    async _deleteArticle({ atomClass, key, article, inner }) {\n      this.ctx.tail(async () => {\n        // queue not async\n        await this.ctx.app.meta.queue.push({\n          locale: this.ctx.locale,\n          subdomain: this.ctx.subdomain,\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'deleteArticle',\n            atomClass, key, article, inner,\n          },\n        });\n      });\n    }\n\n    async _renderArticle({ atomClass, key, inner }) {\n      this.ctx.tail(async () => {\n        // queue not async\n        await this.ctx.app.meta.queue.push({\n          locale: this.ctx.locale,\n          subdomain: this.ctx.subdomain,\n          module: moduleInfo.relativeName,\n          queueName: 'render',\n          queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n          data: {\n            queueAction: 'renderArticle',\n            atomClass, key, inner,\n          },\n        });\n      });\n    }\n\n    async _getArticle({ key, inner }) {\n      if (!inner) {\n      // check right\n        const roleAnonymous = await this.ctx.meta.role.getSystemRole({ roleName: 'anonymous' });\n        const right = await this.ctx.meta.atom.checkRoleRightRead({ atom: { id: key.atomId }, roleId: roleAnonymous.id });\n        if (!right) return null;\n      }\n      // article\n      const article = await this.ctx.meta.atom.read({ key, user: { id: 0 } });\n      if (!article) return null;\n      // check language\n      if (!article.language) this.ctx.throw(1001);\n      return article;\n    }\n\n  }\n\n  return Article;\n};\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n\n  class Category extends app.Service {\n\n    async item({ categoryId }) {\n      return await this.ctx.model.category.get({ id: categoryId });\n    }\n\n    async save({ categoryId, data }) {\n      await this.ctx.model.category.update({\n        id: categoryId,\n        categoryName: data.categoryName,\n        hidden: data.hidden,\n        sorting: data.sorting,\n        flag: data.flag,\n        url: data.url,\n      });\n      // only in development\n      await this._rebuild({ categoryId });\n    }\n\n    async count({ atomClass, language, categoryId, hidden, flag }) {\n      return await this.children({ atomClass, language, categoryId, hidden, flag, count: 1 });\n    }\n\n    async children({ atomClass, language, categoryId, hidden, flag, count = 0 }) {\n      //\n      const where = { };\n      if (count) {\n        if (categoryId !== undefined) where.categoryIdParent = categoryId;\n      } else {\n        where.categoryIdParent = categoryId || 0;\n      }\n      // atomClassId\n      if (!where.categoryIdParent) {\n        const _atomClass = await utils.atomClass2(this.ctx, atomClass);\n        where.atomClassId = _atomClass.id;\n      }\n      //\n      if (language !== undefined) where.language = language;\n      if (hidden !== undefined) where.hidden = hidden;\n      if (flag !== undefined) where.flag = flag;\n      //\n      if (count) {\n        return await this.ctx.model.category.count(where);\n      }\n      return await this.ctx.model.category.select({\n        where,\n        orders: [[ 'sorting', 'asc' ], [ 'createdAt', 'asc' ]],\n      });\n    }\n\n    async add({ atomClass, data }) {\n      const _atomClass = await utils.atomClass2(this.ctx, atomClass);\n      // add\n      const res = await this.ctx.model.category.insert({\n        categoryName: data.categoryName,\n        language: data.language,\n        catalog: 0,\n        hidden: 0,\n        sorting: 0,\n        categoryIdParent: data.categoryIdParent,\n        atomClassId: _atomClass.id,\n      });\n      // adjust catalog\n      await this.adjustCatalog(data.categoryIdParent);\n      // only in development\n      await this._rebuild({ categoryId: res.insertId });\n\n      return res.insertId;\n    }\n\n    async delete({ categoryId }) {\n      // check articles\n      const list = await this.ctx.model.article.select({ where: { categoryId } });\n      if (list.length > 0) this.ctx.throw(1005);\n      // check children\n      const children = await this.children({ categoryId });\n      if (children.length > 0) this.ctx.throw(1004);\n\n      // category\n      const category = await this.ctx.model.category.get({ id: categoryId });\n      // parent\n      const categoryIdParent = category.categoryIdParent;\n\n      // delete\n      await this.ctx.model.category.delete({ id: categoryId });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParent);\n\n      // only in development\n      if (this.ctx.app.meta.isLocal) {\n        const atomClass = await this.ctx.meta.atomClass.get({ id: category.atomClassId });\n        await this._rebuild({ atomClass, language: category.language });\n      }\n    }\n\n    async move({ categoryId, categoryIdParent }) {\n      // category\n      const category = await this.ctx.model.category.get({ id: categoryId });\n      // categoryIdParentOld\n      const categoryIdParentOld = category.categoryIdParent;\n      // move\n      await this.ctx.model.category.update({\n        id: categoryId,\n        categoryIdParent,\n      });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParentOld);\n      await this.adjustCatalog(categoryIdParent);\n      // only in development\n      await this._rebuild({ categoryId });\n    }\n\n    // for donothing on categoryId === 0, so need not input param:atomClass\n    async adjustCatalog(categoryId) {\n      if (categoryId === 0) return;\n      const children = await this.children({ categoryId });\n      await this.ctx.model.category.update({\n        id: categoryId,\n        catalog: children.length === 0 ? 0 : 1,\n      });\n    }\n\n    async tree({ atomClass, language, categoryId, hidden, flag }) {\n      return await this._treeChildren({ atomClass, language, categoryId, hidden, flag });\n    }\n\n    async _treeChildren({ atomClass, language, categoryId, hidden, flag }) {\n      const list = await this.children({ atomClass, language, categoryId, hidden, flag });\n      for (const item of list) {\n        if (item.catalog) {\n          // only categoryId\n          item.children = await this._treeChildren({ atomClass, categoryId: item.id });\n        }\n      }\n      return list;\n    }\n\n    async relativeTop({ categoryId }) {\n      return await this._relativeTop({ categoryId });\n    }\n\n    async _relativeTop({ categoryId }) {\n      const category = await this.item({ categoryId });\n      if (!category) return null;\n      if (category.url) return category;\n      return await this._relativeTop({ categoryId: category.categoryIdParent });\n    }\n\n    async _rebuild({ categoryId, atomClass, language }) {\n      // only in development\n      if (this.ctx.app.meta.isLocal) {\n        // atomClass\n        const item = categoryId ? await this.ctx.model.category.get({ id: categoryId }) : null;\n        const _atomClass = atomClass || await this.ctx.meta.atomClass.get({ id: item.atomClassId });\n        // build site\n        this.ctx.service.site.buildLanguageQueue({ atomClass: _atomClass, language: language || item.language });\n      }\n    }\n\n  }\n\n  return Category;\n};\n","const Build = require('../common/build.js');\n\nmodule.exports = app => {\n\n  class Render extends app.Service {\n\n    async renderArticle({ atomClass, key, inner }) {\n      const build = Build.create(this.ctx, atomClass);\n      await build.renderArticle({ key, inner });\n    }\n\n    async deleteArticle({ atomClass, key, article, inner }) {\n      const build = Build.create(this.ctx, atomClass);\n      await build.deleteArticle({ key, article, inner });\n    }\n\n    async getArticleUrl({ atomClass, key }) {\n      if (!atomClass) {\n        atomClass = await this.ctx.meta.atomClass.getByAtomId({ atomId: key.atomId });\n      }\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getArticleUrl({ key });\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSiteBase({ atomClass }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.combineSiteBase();\n    }\n\n  }\n\n  return Render;\n};\n","const require3 = require('require3');\nconst fse = require3('fs-extra');\nconst extend = require3('extend2');\nconst Build = require('../common/build.js');\n\nconst _blocksLocales = {};\nconst _blockArrayLocales = {};\n\nmodule.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Site extends app.Service {\n\n    async getSite({ atomClass, language, options }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getSite({ language, options });\n    }\n\n    async getConfigSiteBase({ atomClass }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getConfigSiteBase();\n    }\n\n    async getConfigSite({ atomClass }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getConfigSite();\n    }\n\n    // save site config\n    async setConfigSite({ atomClass, data }) {\n      // build\n      const build = Build.create(this.ctx, atomClass);\n      // save\n      await build.setConfigSite({ data });\n      // only in development\n      if (this.ctx.app.meta.isLocal) {\n        // build site\n        this.buildLanguagesQueue({ atomClass });\n        // register watchers\n        await build.registerWatchers();\n      }\n    }\n\n    async getConfigLanguagePreview({ atomClass, language }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getConfigLanguagePreview({ language });\n    }\n\n    async getConfigLanguage({ atomClass, language }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getConfigLanguage({ language });\n    }\n\n    // save language config\n    async setConfigLanguage({ atomClass, language, data }) {\n      // build\n      const build = Build.create(this.ctx, atomClass);\n      // save\n      await build.setConfigLanguage({ language, data });\n      // only in development\n      if (this.ctx.app.meta.isLocal) {\n        // build site\n        this.buildLanguageQueue({ atomClass, language });\n        // register watcher\n        await build.registerWatcher({ language });\n      }\n    }\n\n    async getLanguages({ atomClass }) {\n      const build = Build.create(this.ctx, atomClass);\n      return await build.getLanguages();\n    }\n\n    async getUrl({ atomClass, language, path }) {\n      const build = Build.create(this.ctx, atomClass);\n      const site = await build.getSite({ language });\n      return build.getUrl(site, language, path);\n    }\n\n    buildLanguagesQueue({ atomClass, progressId }) {\n      // queue\n      this.ctx.app.meta.queue.push({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguages',\n          atomClass,\n          progressId,\n        },\n      });\n    }\n\n    buildLanguageQueue({ atomClass, language, progressId }) {\n      // queue\n      this.ctx.app.meta.queue.push({\n        locale: this.ctx.locale,\n        subdomain: this.ctx.subdomain,\n        module: moduleInfo.relativeName,\n        queueName: 'render',\n        queueNameSub: `${atomClass.module}:${atomClass.atomClassName}`,\n        data: {\n          queueAction: 'buildLanguage',\n          atomClass,\n          language,\n          progressId,\n        },\n      });\n    }\n\n    async registerAllWatchers() {\n      // only in development\n      if (!this.ctx.app.meta.isLocal) return;\n      // loop modules\n      for (const module of this.ctx.app.meta.modulesArray) {\n        // cms.site=true\n        if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.site) {\n          // loop atomClasses\n          for (const key in module.main.meta.base.atoms) {\n            if (module.main.meta.base.atoms[key].info.cms === false) continue;\n            // atomClass\n            const atomClass = {\n              module: module.info.relativeName,\n              atomClassName: key,\n              atomClassIdParent: 0,\n            };\n            const build = Build.create(this.ctx, atomClass);\n            await build.registerWatchers();\n          }\n        }\n      }\n    }\n\n    async checkFile({ file, mtime }) {\n      // loop\n      const timeStart = new Date();\n      while (true) {\n        // exists\n        const exists = await fse.pathExists(file);\n        if (!exists) {\n          // deleted\n          return null;\n        }\n        // stat\n        const stat = await fse.stat(file);\n        const mtimeCurrent = stat.mtime.valueOf();\n        if (mtime !== mtimeCurrent) {\n          // different\n          return { mtime: mtimeCurrent };\n        }\n        // check the delayTimeout if the same\n        const timeEnd = new Date();\n        const time = (timeEnd.valueOf() - timeStart.valueOf());\n        if (time >= this.ctx.config.checkFile.timeoutDelay) {\n          // timeout\n          return { mtime: mtimeCurrent };\n        }\n        // sleep 1s then continue\n        await this.ctx.meta.util.sleep(1000);\n      }\n    }\n\n    getBlocks({ locale }) {\n      if (!_blocksLocales[locale]) {\n        const blocks = this._prepareBlocks({ locale });\n        // object\n        _blocksLocales[locale] = blocks;\n        // array order by titleLocale\n        const blockArray = [];\n        for (const key in blocks) {\n          blockArray.push(blocks[key]);\n        }\n        _blockArrayLocales[locale] = blockArray.sort((a, b) => a.meta.titleLocale.localeCompare(b.meta.titleLocale, locale));\n      }\n      return _blocksLocales[locale];\n    }\n\n    getBlockArray({ locale }) {\n      this.getBlocks({ locale });\n      return _blockArrayLocales[locale];\n    }\n\n    async blockSave({ blockName, item }) {\n      // block\n      const blocks = this.getBlocks({ locale: this.ctx.locale });\n      const block = blocks[blockName];\n      // validate\n      await this.ctx.meta.validation.validate({\n        module: block.meta.module,\n        validator: block.meta.validator,\n        schema: null,\n        data: item,\n      });\n      // output\n      if (!block.data.output) return item;\n      return await block.data.output({ ctx: this.ctx, block, data: item });\n    }\n\n    async getStats({ atomClass, languages }) {\n      const res = {};\n      for (const language of languages) {\n        res[language] = await this._getStatsLanguange({ atomClass, language });\n      }\n      return res;\n    }\n\n    async _getStatsLanguange({ atomClass, language }) {\n      const stats = {};\n\n      // articles\n      stats.articles = await this.ctx.meta.atom.count({\n        atomClass,\n        options: {\n          where: {\n            'f.language': language,\n          },\n          mode: 'list', // atomEnabled=1\n        },\n      });\n\n      // comments\n      stats.comments = await this.ctx.meta.atom.count({\n        atomClass,\n        options: {\n          where: {\n            'f.language': language,\n          },\n          mode: 'list', // atomEnabled=1\n          comment: 1,\n        },\n      });\n\n      // categories\n      stats.categories = await this.ctx.service.category.count({\n        atomClass, language,\n      });\n\n      // tags\n\n      // ok\n      return stats;\n    }\n\n    _prepareBlocks({ locale }) {\n      const blocks = {};\n      // modulesArray for block override\n      for (const module of this.app.meta.modulesArray) {\n        if (module.main.meta && module.main.meta.cms &&\n          module.main.meta.cms.plugin && module.main.meta.cms.plugin.blocks) {\n          const blocksModule = this._prepareBlocksModule({ locale, module, blocks: module.main.meta.cms.plugin.blocks });\n          Object.assign(blocks, blocksModule);\n        }\n      }\n      return blocks;\n    }\n\n    _prepareBlocksModule({ locale, module, blocks }) {\n      const blocksModule = extend(true, {}, blocks);\n      for (const key in blocksModule) {\n        const block = blocksModule[key];\n        block.meta.module = module.info.relativeName;\n        block.meta.titleLocale = this.ctx.text.locale(locale, block.meta.title);\n      }\n      return blocksModule;\n    }\n\n  }\n\n  return Site;\n};\n","const utils = require('../common/utils.js');\n\nmodule.exports = app => {\n\n  class Tag extends app.Service {\n\n    async list({ atomClass, options }) {\n      const _atomClass = await utils.atomClass2(this.ctx, atomClass);\n      if (!options.where) options.where = {};\n      options.where.atomClassId = _atomClass.id;\n      return await this.ctx.model.tag.select(options);\n    }\n\n    async create({ atomClassId, language, tagName }) {\n      // check if exists\n      const tag = await this.ctx.model.tag.get({\n        atomClassId, language, tagName,\n      });\n      if (tag) return tag.id;\n      // insert\n      const res = await this.ctx.model.tag.insert({\n        atomClassId, language, tagName, articleCount: 0,\n      });\n      return res.insertId;\n    }\n\n    async updateArticleTags({ atomClass, key, item }) {\n      const _atomClass = await utils.atomClass2(this.ctx, atomClass);\n      // tags\n      let tags = null;\n      if (item.tags) {\n        tags = JSON.parse(item.tags);\n        for (const tag of tags) {\n          if (tag.id === 0) {\n            tag.id = await this.create({ atomClassId: _atomClass.id, language: item.language, tagName: tag.name });\n          }\n        }\n      }\n      // force delete\n      await this.deleteArticleTags({ key });\n      // new\n      if (tags && tags.length > 0) {\n        await this.ctx.model.articleTag.insert({\n          atomId: key.atomId,\n          itemId: key.itemId,\n          tags: JSON.stringify(tags),\n        });\n        for (const tag of tags) {\n          await this.ctx.model.articleTagRef.insert({\n            atomId: key.atomId,\n            itemId: key.itemId,\n            tagId: tag.id,\n          });\n        }\n      }\n      // ok\n      return tags;\n    }\n\n    async deleteArticleTags({ key }) {\n      await this.ctx.model.articleTag.delete({\n        itemId: key.itemId,\n      });\n      await this.ctx.model.articleTagRef.delete({\n        itemId: key.itemId,\n      });\n    }\n\n    async setTagArticleCount({ tagsNew, tagsOld }) {\n      // tags\n      const tags = {};\n      if (tagsNew) {\n        const _tags = typeof tagsNew === 'string' ? JSON.parse(tagsNew) : tagsNew;\n        for (const tag of _tags) {\n          tags[tag.id] = tag;\n        }\n      }\n      if (tagsOld) {\n        const _tags = typeof tagsOld === 'string' ? JSON.parse(tagsOld) : tagsOld;\n        for (const tag of _tags) {\n          tags[tag.id] = tag;\n        }\n      }\n      // loop\n      for (const id in tags) {\n        const articleCount = await this.calcArticleCount({ id });\n        if (articleCount > 0) {\n          // update\n          await this.ctx.model.tag.update({ id, articleCount });\n        } else {\n          // check if referenced by items of deleted or other flag status\n          const articleCount2 = await this.calcArticleCount2({ id });\n          if (articleCount2 > 0) {\n            // update\n            await this.ctx.model.tag.update({ id, articleCount });\n          } else {\n            // delete\n            await this.ctx.model.tag.delete({ id });\n          }\n        }\n      }\n    }\n\n    async calcArticleCount({ id }) {\n      const res = await this.ctx.model.query(`\n        select count(*) articleCount from aCmsArticleTagRef a\n          inner join aAtom b on a.atomId=b.id\n          where a.iid=? and a.tagId=? and b.iid=? and b.deleted=0 and b.atomFlag=2\n        `,\n      [ this.ctx.instance.id, id, this.ctx.instance.id ]);\n      return res[0].articleCount;\n    }\n\n    async calcArticleCount2({ id }) {\n      const res = await this.ctx.model.query(`\n        select count(*) articleCount from aCmsArticleTagRef a where a.iid=? and a.tagId=?\n        `,\n      [ this.ctx.instance.id, id ]);\n      return res[0].articleCount;\n    }\n\n  }\n\n  return Tag;\n};\n","module.exports = app => {\n\n  class Event extends app.Service {\n\n    async atomClassValidator({ event, data: { atomClass, user } }) {\n      // donothing\n    }\n\n  }\n\n  return Event;\n};\n","const article = require('./model/article.js');\nconst category = require('./model/category.js');\nconst content = require('./model/content.js');\nconst tag = require('./model/tag.js');\nconst articleTag = require('./model/articleTag.js');\nconst articleTagRef = require('./model/articleTagRef.js');\n\nmodule.exports = app => {\n  const models = {\n    article,\n    category,\n    content,\n    tag,\n    articleTag,\n    articleTagRef,\n  };\n  return models;\n};\n","module.exports = app => {\n  class Article extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticle', options: { disableDeleted: false } });\n    }\n  }\n  return Article;\n};\n","module.exports = app => {\n  class Category extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsCategory', options: { disableDeleted: true } });\n    }\n  }\n  return Category;\n};\n","module.exports = app => {\n  class Content extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsContent', options: { disableDeleted: false } });\n    }\n  }\n  return Content;\n};\n","module.exports = app => {\n  class Tag extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsTag', options: { disableDeleted: true } });\n    }\n  }\n  return Tag;\n};\n","module.exports = app => {\n  class ArticleTag extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticleTag', options: { disableDeleted: true } });\n    }\n  }\n  return ArticleTag;\n};\n","module.exports = app => {\n  class ArticleTagRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticleTagRef', options: { disableDeleted: true } });\n    }\n  }\n  return ArticleTagRef;\n};\n","module.exports = app => {\n  const keywords = require('./config/validation/keywords.js')(app);\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        article: {\n          info: {\n            title: 'Article',\n            tableName: 'aCmsArticleView',\n            tableNameFull: 'aCmsArticleViewFull',\n            tableNameSearch: 'aCmsArticleViewSearch',\n            tableNameTag: 'aCmsArticleViewTag',\n            flow: 1,\n          },\n          actions: {\n            publish: {\n              code: 101,\n              title: 'Publish',\n              flag: '1,2',\n            },\n          },\n          flags: {\n            1: {\n              title: 'Publishing',\n            },\n            2: {\n              title: 'Published',\n            },\n          },\n          validator: 'article',\n          search: {\n            validator: 'articleSearch',\n          },\n          orders: [\n            { name: 'sticky', title: 'Sticky', by: 'desc' },\n            { name: 'sorting', title: 'Sorting', by: 'asc' },\n          ],\n        },\n      },\n      functions: {\n        createArticle: {\n          title: 'Create Article',\n          scene: 'create',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'create',\n          sorting: 1,\n          menu: 1,\n        },\n        listArticle: {\n          title: 'Article List',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'read',\n          sorting: 1,\n          menu: 1,\n        },\n        listArticleByCategory: {\n          title: 'Article List(by category)',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'read',\n          sorting: 1,\n          menu: 1,\n          actionPath: 'article/category',\n        },\n      },\n    },\n    validation: {\n      validators: {\n        article: {\n          schemas: 'article',\n        },\n        articleSearch: {\n          schemas: 'articleSearch',\n        },\n        category: {\n          schemas: 'category',\n        },\n      },\n      keywords: {\n        'x-slug': keywords.slug,\n      },\n      schemas: {\n        article: schemas.article,\n        articleSearch: schemas.articleSearch,\n        category: schemas.category,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'config/list',\n      },\n    },\n    event: {\n      implementations: {\n        // 'a-base:atomClassValidator': 'event/atomClassValidator',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const keywords = {};\n  keywords.slug = {\n    async: true,\n    type: 'string',\n    errors: true,\n    compile() {\n      return async function(data, path, rootData, name) {\n        // ignore if empty\n        if (!data) return true;\n        // unique slug for language and atomClass\n        const ctx = this;\n        //   atomClass from atomId\n        const atomClass = await ctx.meta.atomClass.getByAtomId({ atomId: rootData.atomId });\n        //   read by atomClass, language, slug\n        const items = await ctx.model.query(`\n          select a.id from aAtom a\n            left join aCmsArticle b on a.id=b.atomId\n              where a.iid=? and a.deleted=0 and a.atomClassId=? and b.language=? and b.slug=?\n          `, [ ctx.instance.id, atomClass.id, rootData.language, data ]);\n        if (items[0] && items[0].id !== rootData.atomId) {\n          const errors = [{ keyword: 'x-slug', params: [], message: ctx.text('Slug Exists') }];\n          throw new app.meta.ajv.ValidationError(errors);\n        }\n        return true;\n      };\n    },\n  };\n  return keywords;\n};\n","module.exports = app => {\n  const schemas = {};\n  // article\n  schemas.article = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'articleItem',\n      },\n    },\n    properties: {\n      atomId: {\n        type: 'number',\n      },\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Atom Name',\n        notEmpty: true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n        notEmpty: true,\n      },\n      sticky: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Sticky',\n        default: false,\n      },\n      keywords: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Keywords',\n      },\n      tags: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Tags',\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTextarea: true,\n        ebTitle: 'Description',\n      },\n      editMode: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Edit Mode',\n        notEmpty: true,\n      },\n      slug: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Slug',\n        'x-slug': true,\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      flag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      extra: {\n        type: 'string',\n        ebType: 'text',\n        ebTextarea: true,\n        ebTitle: 'Extra Attributes',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n      allowComment: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Allow Comment',\n        default: false,\n      },\n    },\n  };\n\n  // article search\n  schemas.articleSearch = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'articleSearch',\n      },\n    },\n    properties: {\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n        ebOptionsBlankAuto: true,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n    },\n  };\n\n  // category\n  schemas.category = {\n    type: 'object',\n    properties: {\n      categoryName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Category name',\n        notEmpty: true,\n      },\n      hidden: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Hidden',\n        default: false,\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      flag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      catalog: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Catalog',\n        ebReadOnly: true,\n        default: false,\n      },\n      language: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Language',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n      url: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Url',\n      },\n    },\n  };\n\n  return schemas;\n};\n"],"sourceRoot":""}