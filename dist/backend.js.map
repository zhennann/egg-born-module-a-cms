{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/external \"path\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/en-us.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/article.js","webpack://backend/./backend/src/controller/category.js","webpack://backend/./backend/src/controller/render.js","webpack://backend/./backend/src/controller/site.js","webpack://backend/./backend/src/controller/tag.js","webpack://backend/./backend/src/controller/comment.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/article.js","webpack://backend/./backend/src/service/category.js","webpack://backend/./backend/src/service/render.js","webpack://backend/./backend/src/common/time.js","webpack://backend/./backend/src/service sync","webpack://backend/./backend/src/service/site.js","webpack://backend/./backend/src/service/tag.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/article.js","webpack://backend/./backend/src/model/category.js","webpack://backend/./backend/src/model/content.js","webpack://backend/./backend/src/model/tag.js","webpack://backend/./backend/src/model/articleTag.js","webpack://backend/./backend/src/model/articleTagRef.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA,qC;;;;;;ACAA,iC;;;;;;ACAA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;;AAEA;AACA,iBAAiB,mBAAO,CAAC,CAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;;;;;;ACzDA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;;;;;;;ACDA,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,gBAAgB,mBAAO,CAAC,EAAyB;AACjD,iBAAiB,mBAAO,CAAC,EAA0B;AACnD,eAAe,mBAAO,CAAC,EAAwB;AAC/C,aAAa,mBAAO,CAAC,EAAsB;AAC3C,YAAY,mBAAO,CAAC,EAAqB;AACzC,gBAAgB,mBAAO,CAAC,EAAyB;;AAEjD;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,iFAAiF;AACtF;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,oFAAoF;AACzF,KAAK,mFAAmF;AACxF,KAAK,oFAAoF;AACzF,KAAK,oFAAoF;AACzF,KAAK,oFAAoF;AACzF,KAAK,iFAAiF;AACtF,KAAK,wFAAwF;AAC7F;AACA,KAAK,gGAAgG;AACrG;AACA,KAAK,8FAA8F;AACnG,KAAK,8FAA8F;AACnG,KAAK;AACL,aAAa,SAAS,0BAA0B,EAAE;AAClD,KAAK;AACL;AACA,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,sEAAsE,SAAS,2DAA2D,EAAE,EAAE;AACnJ,KAAK,sEAAsE,SAAS,2DAA2D,EAAE,EAAE;AACnJ,KAAK,iFAAiF,SAAS,2DAA2D,EAAE,EAAE;AAC9J,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,0EAA0E,SAAS,2DAA2D,EAAE,EAAE;AACvJ,KAAK,2FAA2F,SAAS,2DAA2D,EAAE,EAAE;AACxK,KAAK,4FAA4F,SAAS,2DAA2D,EAAE,EAAE;AACzK,KAAK,8DAA8D;AACnE,KAAK,wDAAwD;AAC7D;AACA,KAAK,qEAAqE,SAAS,2DAA2D,EAAE,EAAE;AAClJ,KAAK;AACL,iBAAiB,wBAAwB;AACzC,cAAc,2DAA2D;AACzE,KAAK,EAAE;AACP,KAAK,8DAA8D;AACnE,KAAK,kEAAkE;AACvE,KAAK,oEAAoE,SAAS,2DAA2D,EAAE,EAAE;AACjJ,KAAK,uEAAuE,SAAS,2DAA2D,EAAE,EAAE;AACpJ,KAAK,qEAAqE,SAAS,2DAA2D,EAAE,EAAE;AAClJ;AACA,KAAK,oDAAoD;AACzD,KAAK,0FAA0F;;AAE/F;AACA;AACA;;;;;;;AC5DA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AChGA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;AC7DA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACrBA;;AAEA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACtEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP,wBAAwB,OAAO;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;;ACzBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;;;;;AChCA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,iBAAiB,mBAAO,CAAC,EAAuB;AAChD,eAAe,mBAAO,CAAC,EAAqB;AAC5C,aAAa,mBAAO,CAAC,EAAmB;AACxC,YAAY,mBAAO,CAAC,EAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjtG,uDAAuD,mBAAmB;AAC1E;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA,WAAW,2CAA2C;AACtD,WAAW,yDAAyD;AACpE,WAAW,0DAA0D;AACrE,WAAW,mEAAmE;AAC9E,WAAW,sEAAsE;AACjF,WAAW,uEAAuE;AAClF,WAAW,yEAAyE;AACpF,WAAW,6DAA6D;AACxE;AACA;AACA,6DAA6D,2BAA2B;AACxF;AACA;AACA,qDAAqD,+BAA+B;AACpF;AACA;AACA;AACA;AACA,WAAW;AACX,4DAA4D,iCAAiC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;ACzPA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;;AAEA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA;;AAEA,iBAAiB,yCAAyC;AAC1D;AACA,qDAAqD,YAAY;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,OAAO;AACP;AACA;AACA;;;AAGA;AACA,oEAAoE,YAAY;;AAEhF;AACA;AACA,qDAAqD,iCAAiC;AACtF;;AAEA;AACA,iCAAiC,qCAAqC;AACtE;;AAEA,kBAAkB,uBAAuB;AACzC;AACA,qDAAqD,YAAY;;AAEjE;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;;AAEP;AACA,oDAAoD,MAAM;;AAE1D;AACA;AACA,qDAAqD,uCAAuC;AAC5F;;AAEA;AACA;AACA;AACA;AACA,eAAe,uDAAuD;AACtE,OAAO;AACP;;AAEA,kBAAkB,+BAA+B;AACjD;AACA;AACA,uDAAuD,YAAY;;AAEnE;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;;AAET;AACA;AACA,yDAAyD,wBAAwB;AACjF;;AAEA;AACA,mCAAmC,oBAAoB;AACvD;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,OAAO;AACP;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;;AAEA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA,eAAe,aAAa;AAC5B,OAAO;AACP;;;AAGA;;AAEA;AACA;;;;;;;AC5KA;;AAEA;;AAEA,gBAAgB,aAAa;AAC7B,gDAAgD,iBAAiB;AACjE;;AAEA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,oBAAoB,qCAAqC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,eAAe,2CAA2C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA,kBAAkB,aAAa;AAC/B;AACA,wDAAwD,SAAS,aAAa,EAAE;AAChF;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA,4CAA4C,iBAAiB;AAC7D;AACA;AACA;;AAEA,gBAAgB,+BAA+B;AAC/C;AACA,0DAA0D,iBAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,OAAO;AACP;;AAEA,gBAAgB,qCAAqC;AACrD,uCAAuC,qCAAqC;AAC5E;;AAEA,yBAAyB,qCAAqC;AAC9D,wCAAwC,qCAAqC;AAC7E;AACA;AACA;AACA,oDAAoD,sBAAsB;AAC1E;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;AC3GA,aAAa,mBAAO,CAAC,CAAM;AAC3B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,EAAmB;;AAExC;;AAEA;;AAEA,0BAA0B,WAAW;AACrC;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA,gCAAgC,OAAO;AACvC;AACA,kCAAkC,OAAO;AACzC;AACA,+BAA+B,OAAO;AACtC;;AAEA,yBAAyB,aAAa;AACtC;AACA,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA,iCAAiC,OAAO;AACxC;AACA;;AAEA,yBAAyB,sBAAsB;AAC/C;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE,qBAAqB,YAAY;AACxE;AACA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;;AAEA,yBAAyB,MAAM;AAC/B;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,aAAa;AACpC;AACA;AACA,sEAAsE,wBAAwB;AAC9F,mEAAmE,QAAQ,iBAAiB,4BAA4B;AACxH;AACA;AACA;AACA,qDAAqD,aAAa,QAAQ,EAAE;AAC5E;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,OAAO;AAClC;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,oBAAoB,4CAA4C;AAChE;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT,eAAe,aAAa;AAC5B;AACA,OAAO;AACP;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA,oCAAoC,kBAAkB;AACtD;AACA,iCAAiC,iBAAiB;AAClD;;AAEA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,OAAO;AACP;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,OAAO;AACP;AACA;AACA,yCAAyC,OAAO;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,qCAAqC,EAAE,qBAAqB,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,iBAAiB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,gBAAgB;AAC1C;AACA,uCAAuC,OAAO;AAC9C;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,OAAO;AACP,yCAAyC,4BAA4B;AACrE;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,wCAAwC,gBAAgB;AACxD,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,gBAAgB;AAC1C,yCAAyC,iDAAiD;AAC1F,yCAAyC,+CAA+C;AACxF;AACA;;AAEA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,oDAAoD,iDAAiD;AACrG;AACA,mDAAmD,kBAAkB,IAAI,qBAAqB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB,GAAG,IAAI,GAAG,mBAAmB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,KAAK;AAC1C;AACA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA,2BAA2B,eAAe,IAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,kBAAkB,KAAK,cAAc;AAC/E,kBAAkB,OAAO,EAAE,UAAU,EAAE,qBAAqB;AAC5D;AACA,gBAAgB,cAAc,EAAE,mDAAmD;AACnF;AACA;AACA;AACA,gBAAgB,QAAQ,EAAE,yDAAyD;AACnF;AACA;AACA;AACA,uBAAuB,QAAQ,GAAG,KAAK;AACvC;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wBAAQ,KAAK,CAAC;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qDAAqD,qBAAqB,GAAG,qBAAqB;AAClG,WAAW;AACX,SAAS;AACT;AACA;;AAEA;AACA;AACA,4FAA4F;AAC5F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA,qCAAqC,qBAAqB;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,WAAW;AACvF;AACA,4BAA4B;AAC5B;AACA,SAAS,YAAY,oBAAoB;AACzC;AACA;;AAEA;;AAEA;AACA;;;;;;;ACrhBA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uJAAuJ;AAC7K;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,4CAA4C,IAAI,IAAI,IAAI;AACxD,GAAG;AACH;AACA;AACA,0CAA0C,IAAI,IAAI,IAAI;AACtD,GAAG;AACH;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA,4B;;;;;;ACRA,aAAa,mBAAO,CAAC,CAAM;AAC3B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,OAAO;AAChC;AACA;;AAEA,oCAAoC,WAAW;AAC/C,0DAA0D,WAAW;AACrE;AACA;AACA;;AAEA,6BAA6B,WAAW;AACxC,sDAAsD,SAAS;AAC/D;;AAEA,6BAA6B,iBAAiB;AAC9C;AACA,+CAA+C,SAAS;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC,0DAA0D,WAAW;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;;AAEA,yBAAyB,WAAW;AACpC;AACA;;AAEA;AACA,0DAA0D,WAAW;;AAErE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,WAAW;AAC3B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,WAAW;AAC3B,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB,iBAAiB;AACrC,WAAW;AACX;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS,GAAG,IAAI;AAClC,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;;AAEtC;AACA,qCAAqC,OAAO;;AAE5C;AACA,oDAAoD,WAAW;;AAE/D;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;;AAEA,wBAAwB,OAAO;AAC/B;AACA;AACA,kCAAkC,WAAW;AAC7C;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW,EAAE,yDAAyD;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM;AACR;AACA;AACA,8BAA8B,YAAY;AAC1C;;AAEA;;AAEA;AACA;;;;;;;ACpPA;;AAEA;;AAEA,gBAAgB,UAAU;AAC1B;AACA;;AAEA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,6CAA6C;AACrF;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,MAAM;AACnC;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA,2CAA2C,mBAAmB;AAC9D,SAAS;AACT,8DAA8D,KAAK;AACnE;AACA;AACA,6CAA6C,mBAAmB;AAChE,WAAW;AACX;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;;AAEA,4BAA4B,KAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACrHA,gBAAgB,mBAAO,CAAC,EAAoB;AAC5C,iBAAiB,mBAAO,CAAC,EAAqB;AAC9C,gBAAgB,mBAAO,CAAC,EAAoB;AAC5C,YAAY,mBAAO,CAAC,EAAgB;AACpC,mBAAmB,mBAAO,CAAC,EAAuB;AAClD,sBAAsB,mBAAO,CAAC,EAA0B;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjBA;AACA;AACA;AACA,kBAAkB,iCAAiC,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,kCAAkC,uBAAuB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,iCAAiC,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,6BAA6B,uBAAuB,EAAE;AACxE;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,oCAAoC,uBAAuB,EAAE;AAC/E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,uCAAuC,uBAAuB,EAAE;AAClF;AACA;AACA;AACA;;;;;;;ACPA;AACA,kBAAkB,mBAAO,CAAC,EAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require(\"require3\");","module.exports = require(\"path\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // article\n  config.article = {\n    trim: {\n      limit: 100,\n      wordBreak: false,\n      preserveTags: false,\n    },\n    publishOnSubmit: true,\n  };\n\n  // site\n  config.site = {\n    base: {\n      title: 'my blog',\n      subTitle: 'gone with the wind',\n      description: '',\n      keywords: '',\n    },\n    host: {\n      url: 'http://example.com',\n      rootPath: '',\n    },\n    language: {\n      default: 'en-us',\n      items: 'en-us',\n    },\n    themes: {\n      'en-us': 'cms-themeblog',\n    },\n    edit: {\n      mode: 1, // markdown\n    },\n    env: {\n      format: {\n        date: 'YYYY-MM-DD',\n        time: 'HH:mm:ss',\n      },\n      comment: {\n        order: 'asc',\n        recentNum: 5,\n      },\n    },\n    profile: {\n      userName: 'zhennann',\n      motto: 'Less is more, while more is less.',\n      avatar: 'assets/images/avatar.jpg',\n      url: 'index.html',\n      extra: '',\n    },\n  };\n\n  //\n  return config;\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'en-us': 'English',\n  'zh-cn': 'Chinese',\n  PersonalProfile: 'Profile',\n  ArticlePrevious: 'Previous',\n  ArticleNext: 'Next',\n};\n","module.exports = {\n  Article: '文章',\n  Catalog: '目录',\n  Category: '目录',\n  Categories: '目录',\n  Comments: '评论',\n  Language: '语言',\n  Publish: '发布',\n  Publishing: '发布中',\n  Published: '已发布',\n  Search: '搜索',\n  Submit: '提交',\n  Sorting: '排序',\n  Tag: '标签',\n  Tags: '标签',\n  'Are you sure?': '您确认吗？',\n  'Article List': '文章清单',\n  'Article List(by category)': '文章清单(按目录)',\n  'Category name': '目录名称',\n  'Comment Disabled': '禁止评论',\n  'Create Article': '新建文章',\n  'Language must not be empty': '语言不允许为空',\n  'Load More': '加载更多',\n  'Post Comment': '发表评论',\n  'Recent Comments': '最近评论',\n  'Theme not set': '没有设置主题',\n  'Theme not found': '没有找到主题',\n  'en-us': '英语',\n  'zh-cn': '简体中文',\n  PersonalProfile: '个人信息',\n  ArticlePrevious: '前一篇',\n  ArticleNext: '后一篇',\n  Yes: '是',\n  No: '否',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Language must not be empty',\n  1002: 'Theme not set',\n  1003: 'Theme not found',\n  1004: 'Cannot delete if has children',\n  1005: 'Cannot delete if has articles',\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst article = require('./controller/article.js');\nconst category = require('./controller/category.js');\nconst render = require('./controller/render.js');\nconst site = require('./controller/site.js');\nconst tag = require('./controller/tag.js');\nconst comment = require('./controller/comment.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // article\n    { method: 'post', path: 'article/create', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/read', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/select', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/write', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/delete', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/action', controller: article, middlewares: 'inner' },\n    { method: 'post', path: 'article/enable', controller: article, middlewares: 'inner' },\n    { method: 'get', path: 'article/list', controller: article, middlewares: 'jsonp' },\n    { method: 'get', path: 'article/attachments', controller: article, middlewares: 'jsonp' },\n    // comment\n    { method: 'get', path: 'comment/all', controller: comment, action: 'allP', middlewares: 'jsonp' },\n    // render\n    { method: 'post', path: 'render/renderArticle', controller: render, middlewares: 'inner,file' },\n    { method: 'post', path: 'render/deleteArticle', controller: render, middlewares: 'inner,file' },\n    { method: 'post', path: 'render/getArticleUrl', controller: render,\n      meta: { right: { type: 'atom', action: 2 } },\n    },\n    // site\n    { method: 'post', path: 'site/getConfigSiteBase', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigSite', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/setConfigSite', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigLanguagePreview', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getConfigLanguage', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/setConfigLanguage', controller: site, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/buildLanguage', controller: site, middlewares: 'file', meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/buildLanguages', controller: site, middlewares: 'file', meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'site/getLanguages', controller: site },\n    { method: 'post', path: 'site/getUrl', controller: site },\n    // category\n    { method: 'post', path: 'category/item', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/save', controller: category, middlewares: 'validate', meta: {\n      validate: { validator: 'category' },\n      right: { type: 'function', module: 'a-settings', name: 'settings' },\n    } },\n    { method: 'post', path: 'category/tree', controller: category }, // not set function right\n    { method: 'post', path: 'category/children', controller: category }, // not set function right\n    { method: 'post', path: 'category/add', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/delete', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    { method: 'post', path: 'category/move', controller: category, meta: { right: { type: 'function', module: 'a-settings', name: 'settings' } } },\n    // tag\n    { method: 'post', path: 'tag/list', controller: tag },\n    { method: 'get', path: 'tag/list', controller: tag, action: 'listP', middlewares: 'jsonp' },\n\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n\n  class ArticleController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.article.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.article.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.article.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.article.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.article.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.article.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.article.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    // list\n    async list() {\n      // options\n      const options = JSON.parse(this.ctx.request.query.options);\n      // filter drafts\n      options.where = extend(true, options.where, {\n        'a.atomEnabled': 1,\n        'a.atomFlag': 2,\n      });\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/base/atom/select',\n        body: {\n          atomClass: {\n            module: 'a-cms',\n            atomClassName: 'article',\n          },\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n    // attachments\n    async attachments() {\n      // data\n      const data = JSON.parse(this.ctx.request.query.data);\n      // options\n      const options = data.options || {};\n      // filter drafts\n      options.where = extend(true, options.where, {\n        mode: 2,\n        attachment: 1,\n      });\n      if (!options.orders) {\n        options.orders = [\n          [ 'realName', 'asc' ],\n        ];\n      }\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/file/file/list',\n        body: {\n          key: data.key,\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return ArticleController;\n};\n\n","module.exports = app => {\n\n  class CategoryController extends app.Controller {\n\n    async item() {\n      const data = await this.ctx.service.category.item({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(data);\n    }\n\n    async save() {\n      const res = await this.ctx.service.category.save({\n        categoryId: this.ctx.request.body.categoryId,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async tree() {\n      const list = await this.ctx.service.category.tree({\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        hidden: this.ctx.request.body.hidden,\n        flag: this.ctx.request.body.flag,\n      });\n      this.ctx.success({ list });\n    }\n\n    async children() {\n      const list = await this.ctx.service.category.children({\n        language: this.ctx.request.body.language,\n        categoryId: this.ctx.request.body.categoryId,\n        hidden: this.ctx.request.body.hidden,\n        flag: this.ctx.request.body.flag,\n      });\n      this.ctx.success({ list });\n    }\n\n    async add() {\n      const res = await this.ctx.service.category.add(this.ctx.request.body.data);\n      this.ctx.success(res);\n    }\n\n    async delete() {\n      const res = await this.ctx.service.category.delete({\n        categoryId: this.ctx.request.body.categoryId,\n      });\n      this.ctx.success(res);\n    }\n\n    async move() {\n      const res = await this.ctx.service.category.move({\n        categoryId: this.ctx.request.body.categoryId,\n        categoryIdParent: this.ctx.request.body.categoryIdParent,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CategoryController;\n};\n\n","module.exports = app => {\n\n  class RenderController extends app.Controller {\n\n    async renderArticle() {\n      const res = await this.ctx.service.render.renderArticle(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async deleteArticle() {\n      const res = await this.ctx.service.render.deleteArticle(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async getArticleUrl() {\n      const res = await this.ctx.service.render.getArticleUrl(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return RenderController;\n};\n\n","module.exports = app => {\n\n  class SiteController extends app.Controller {\n\n    async getConfigSiteBase() {\n      const data = await this.ctx.service.site.getConfigSiteBase();\n      this.ctx.success({ data });\n    }\n\n    async getConfigSite() {\n      const data = await this.ctx.service.site.getConfigSite();\n      this.ctx.success({ data });\n    }\n\n    async setConfigSite() {\n      const res = await this.ctx.service.site.setConfigSite({\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async getConfigLanguagePreview() {\n      const data = await this.ctx.service.site.getConfigLanguagePreview({\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async getConfigLanguage() {\n      const data = await this.ctx.service.site.getConfigLanguage({\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success({ data });\n    }\n\n    async setConfigLanguage() {\n      const res = await this.ctx.service.site.setConfigLanguage({\n        language: this.ctx.request.body.language,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n    async buildLanguage() {\n      const res = await this.ctx.service.site.buildLanguage({\n        language: this.ctx.request.body.language,\n      });\n      this.ctx.success(res);\n    }\n\n    async buildLanguages() {\n      const res = await this.ctx.service.site.buildLanguages();\n      this.ctx.success(res);\n    }\n\n    async getLanguages() {\n      const res = await this.ctx.service.site.getLanguages();\n      this.ctx.success(res);\n    }\n\n    async getUrl() {\n      const res = await this.ctx.service.site.getUrl({\n        language: this.ctx.request.body.language,\n        path: this.ctx.request.body.path,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return SiteController;\n};\n\n","module.exports = app => {\n\n  class TagController extends app.Controller {\n\n    async list() {\n      const list = await this.ctx.service.tag.list({\n        options: this.ctx.request.body.options,\n      });\n      this.ctx.success({ list });\n    }\n\n    async listP() {\n      // options\n      const options = JSON.parse(this.ctx.request.query.options);\n      // list\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/cms/tag/list',\n        body: { options },\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return TagController;\n};\n\n","const require3 = require('require3');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n\n  class CommentController extends app.Controller {\n\n    async allP() {\n      // options\n      const options = JSON.parse(this.ctx.request.query.options);\n      // filter drafts\n      options.where = extend(true, options.where, {\n        'a.atomEnabled': 1,\n        'a.atomFlag': 2,\n      });\n      // select\n      const res = await this.ctx.performAction({\n        method: 'post',\n        url: '/a/base/comment/all',\n        body: {\n          atomClass: {\n            module: 'a-cms',\n            atomClassName: 'article',\n          },\n          options,\n        },\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CommentController;\n};\n","const version = require('./service/version.js');\nconst article = require('./service/article.js');\nconst category = require('./service/category.js');\nconst render = require('./service/render.js');\nconst site = require('./service/site.js');\nconst tag = require('./service/tag.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    article,\n    category,\n    render,\n    site,\n    tag,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: aCmsArticle\n        let sql = `\n          CREATE TABLE aCmsArticle (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            categoryId int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            sticky int(11) DEFAULT '0',\n            keywords varchar(255) DEFAULT NULL,\n            description text DEFAULT NULL,\n            summary text DEFAULT NULL,\n            url varchar(255) DEFAULT NULL,\n            editMode int(11) DEFAULT '0',\n            slug varchar(255) DEFAULT NULL,\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            extra json DEFAULT NULL,\n            imageFirst varchar(255) DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsContent\n        sql = `\n          CREATE TABLE aCmsContent (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            content text DEFAULT NULL,\n            html text DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsCategory\n        sql = `\n          CREATE TABLE aCmsCategory (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            categoryName varchar(50) DEFAULT NULL,\n            language varchar(50) DEFAULT NULL,\n            catalog int(11) DEFAULT '0',\n            hidden int(11) DEFAULT '0',\n            sorting int(11) DEFAULT '0',\n            flag varchar(255) DEFAULT NULL,\n            categoryIdParent int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleView\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewFull\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n      if (options.version === 2) {\n        // create table: aCmsTag\n        let sql = `\n          CREATE TABLE aCmsTag (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            language varchar(50) DEFAULT NULL,\n            tagName varchar(50) DEFAULT NULL,\n            articleCount int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsArticleTag\n        sql = `\n          CREATE TABLE aCmsArticleTag (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            tags JSON DEFAULT NULL,\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // create table: aCmsArticleTagRef\n        sql = `\n          CREATE TABLE aCmsArticleTagRef (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            itemId int(11) DEFAULT '0',\n            tagId int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleView\n        await this.ctx.model.query('drop view aCmsArticleView');\n        sql = `\n          CREATE VIEW aCmsArticleView as\n            select a.*,b.categoryName,e.tags from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // alter view: aCmsArticleViewFull\n        await this.ctx.model.query('drop view aCmsArticleViewFull');\n        sql = `\n          CREATE VIEW aCmsArticleViewFull as\n            select a.*,b.categoryName,e.tags,c.content,c.html from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewSearch\n        sql = `\n          CREATE VIEW aCmsArticleViewSearch as\n            select a.*,b.categoryName,e.tags,c.content,c.html,concat(d.atomName,',',c.content) contentSearch from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsContent c on a.id=c.itemId\n              left join aAtom d on a.atomId=d.id\n              left join aCmsArticleTag e on a.id=e.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n        // create view: aCmsArticleViewTag\n        sql = `\n          CREATE VIEW aCmsArticleViewTag as\n            select a.*,b.categoryName,e.tags,f.tagId from aCmsArticle a\n              left join aCmsCategory b on a.categoryId=b.id\n              left join aCmsArticleTag e on a.id=e.itemId\n              left join aCmsArticleTagRef f on a.id=f.itemId\n        `;\n        await this.ctx.model.query(sql);\n\n      }\n\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // create roles: cms-writer cms-publisher\n        const roles = [ 'cms-writer', 'cms-publisher' ];\n        const roleAuthenticated = await this.ctx.meta.role.getSystemRole({ roleName: 'authenticated' });\n        const userRoot = await this.ctx.meta.user.get({ userName: 'root' });\n        for (const roleName of roles) {\n          const roleId = await this.ctx.meta.role.add({\n            roleName,\n            roleIdParent: roleAuthenticated.id,\n          });\n          // add user to role\n          await this.ctx.meta.role.addUserRole({\n            userId: userRoot.id,\n            roleId,\n          });\n        }\n        // build roles\n        await this.ctx.meta.role.build();\n\n        // add role rights\n        const roleRights = [\n          { roleName: 'cms-writer', action: 'create' },\n          { roleName: 'cms-writer', action: 'write', scopeNames: 0 },\n          { roleName: 'cms-writer', action: 'delete', scopeNames: 0 },\n          { roleName: 'cms-writer', action: 'read', scopeNames: 'cms-writer' },\n          { roleName: 'cms-publisher', action: 'read', scopeNames: 'cms-writer' },\n          { roleName: 'cms-publisher', action: 'write', scopeNames: 'cms-writer' },\n          { roleName: 'cms-publisher', action: 'publish', scopeNames: 'cms-writer' },\n          { roleName: 'root', action: 'read', scopeNames: 'cms-writer' },\n        ];\n        const module = this.ctx.app.meta.modules[this.ctx.module.info.relativeName];\n        const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'article' });\n        for (const roleRight of roleRights) {\n          // role\n          const role = await this.ctx.meta.role.get({ roleName: roleRight.roleName });\n          // scope\n          let scope;\n          if (!roleRight.scopeNames) {\n            scope = 0;\n          } else {\n            const roleScope = await this.ctx.meta.role.get({ roleName: roleRight.scopeNames });\n            scope = [ roleScope.id ];\n          }\n          // add role right\n          await this.ctx.meta.role.addRoleRight({\n            roleId: role.id,\n            atomClassId: atomClass.id,\n            action: this.ctx.constant.module('a-base').atom.action[roleRight.action] || module.main.meta.base.atoms.article\n              .actions[roleRight.action].code,\n            scope,\n          });\n        }\n\n      }\n    }\n\n    async test() {\n\n    }\n\n  }\n\n  return Version;\n};\n","const require3 = require('require3');\nconst trimHtml = require3('trim-html');\nconst markdown = require3('@zhennann/markdown');\n\nmodule.exports = app => {\n\n  class Article extends app.Service {\n\n    async create({ atomClass, key, atom, user }) {\n      const site = await this.ctx.service.render.combineSiteBase();\n      const editMode = site.edit.mode;\n      // add article\n      const res = await this.ctx.model.article.insert({\n        atomId: key.atomId,\n        editMode,\n      });\n      const itemId = res.insertId;\n      // add content\n      await this.ctx.model.content.insert({\n        atomId: key.atomId,\n        itemId,\n        content: '',\n      });\n      return { atomId: key.atomId, itemId };\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n    }\n\n    async write({ atomClass, key, item, validation, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.meta.atom.read({ key, user });\n\n      // image first\n      let imageFirst = '';\n      if (item.editMode === 1) {\n        const matches = item.content && item.content.match(/!\\[[^\\]]*?\\]\\(([^\\)]*?)\\)/);\n        imageFirst = (matches && matches[1]) || '';\n      }\n      // markdown\n      const md = markdown.create();\n      let html;\n      // html\n      if (item.editMode === 1) {\n        html = item.content ? md.render(item.content) : '';\n      } else {\n        html = item.content;\n      }\n      // summary\n      const summary = trimHtml(html, this.ctx.config.article.trim);\n      // update article\n      await this.ctx.model.article.update({\n        id: key.itemId,\n        language: item.language,\n        categoryId: item.categoryId,\n        sticky: item.sticky,\n        keywords: item.keywords,\n        description: item.description,\n        summary: summary.html,\n        editMode: item.editMode,\n        slug: item.slug,\n        sorting: item.sorting,\n        flag: item.flag,\n        extra: item.extra || '{}',\n        imageFirst,\n      });\n      // update content\n      await this.ctx.model.query('update aCmsContent a set a.content=?, a.html=? where a.iid=? and a.atomId=?',\n        [ item.content, html, this.ctx.instance.id, key.atomId ]);\n\n\n      // tags\n      const tagsNew = await this.ctx.service.tag.updateArticleTags({ key, item });\n\n      // set tag count , force check if delete tags\n      // if (atomOld.atomFlag === 2) {\n      await this.ctx.service.tag.setTagArticleCount({ tagsNew, tagsOld: atomOld.tags });\n      // }\n\n      // render\n      await this._renderArticle({ key, inner: atomOld.atomFlag !== 2 });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // get atom for safety\n      const atomOld = await this.ctx.meta.atom.read({ key, user });\n\n      // delete article\n      await this.ctx.model.article.delete({\n        id: key.itemId,\n      });\n      // delete content\n      await this.ctx.model.content.delete({\n        itemId: key.itemId,\n      });\n\n      // delete tags\n      await this.ctx.service.tag.deleteArticleTags({ key });\n\n      // set tag count , force check if delete tags\n      // if (atomOld.atomFlag === 2) {\n      await this.ctx.service.tag.setTagArticleCount({ tagsNew: null, tagsOld: atomOld.tags });\n      // }\n\n      // delete article\n      await this.ctx.performAction({\n        method: 'post',\n        url: 'render/deleteArticle',\n        body: { key, article: atomOld, inner: atomOld.atomFlag !== 2 },\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // get atom for safety\n        const atomOld = await this.ctx.meta.atom.read({ key, user });\n\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n        // change flow\n        await this.ctx.meta.atom.flow({\n          key,\n          atom: { atomFlow: 0 },\n          user,\n        });\n\n        // tags\n        if (atomOld.atomFlag !== 2) {\n          await this.ctx.service.tag.setTagArticleCount({ tagsOld: atomOld.tags });\n        }\n\n        // render\n        await this._renderArticle({ key, inner: false });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n      if (this.ctx.config.article.publishOnSubmit) {\n        // publish\n        await this.action({ action: 101, key, user });\n      }\n    }\n\n    async _renderArticle({ key, inner }) {\n      await this.ctx.performAction({\n        method: 'post',\n        url: 'render/renderArticle',\n        body: { key, inner },\n      });\n    }\n\n\n  }\n\n  return Article;\n};\n","module.exports = app => {\n\n  class Category extends app.Service {\n\n    async item({ categoryId }) {\n      return await this.ctx.model.category.get({ id: categoryId });\n    }\n\n    async save({ categoryId, data }) {\n      await this.ctx.model.category.update({\n        id: categoryId,\n        categoryName: data.categoryName,\n        hidden: data.hidden,\n        sorting: data.sorting,\n        flag: data.flag,\n      });\n    }\n\n    async children({ language, categoryId, hidden, flag }) {\n      const where = {\n        categoryIdParent: categoryId || 0,\n      };\n      if (language !== undefined) where.language = language;\n      if (hidden !== undefined) where.hidden = hidden;\n      if (flag !== undefined) where.flag = flag;\n      const list = await this.ctx.model.category.select({\n        where,\n        orders: [[ 'sorting', 'asc' ], [ 'createdAt', 'asc' ]],\n      });\n      return list;\n    }\n\n    async add({ categoryName, language, categoryIdParent }) {\n      // add\n      const res = await this.ctx.model.category.insert({\n        categoryName,\n        language,\n        catalog: 0,\n        hidden: 0,\n        sorting: 0,\n        categoryIdParent,\n      });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParent);\n\n      return res.insertId;\n    }\n\n    async delete({ categoryId }) {\n      // check articles\n      const list = await this.ctx.model.article.select({ where: { categoryId } });\n      if (list.length > 0) this.ctx.throw(1005);\n      // check children\n      const children = await this.children({ categoryId });\n      if (children.length > 0) this.ctx.throw(1004);\n      // category\n      const category = await this.ctx.model.category.get({ id: categoryId });\n      // parent\n      const categoryIdParent = category.categoryIdParent;\n      // delete\n      await this.ctx.model.category.delete({ id: categoryId });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParent);\n    }\n\n    async move({ categoryId, categoryIdParent }) {\n      // category\n      const category = await this.ctx.model.category.get({ id: categoryId });\n      // categoryIdParentOld\n      const categoryIdParentOld = category.categoryIdParent;\n      // move\n      await this.ctx.model.category.update({\n        id: categoryId,\n        categoryIdParent,\n      });\n      // adjust catalog\n      await this.adjustCatalog(categoryIdParentOld);\n      await this.adjustCatalog(categoryIdParent);\n    }\n\n    async adjustCatalog(categoryId) {\n      if (categoryId === 0) return;\n      const children = await this.children({ categoryId });\n      await this.ctx.model.category.update({\n        id: categoryId,\n        catalog: children.length === 0 ? 0 : 1,\n      });\n    }\n\n    async tree({ language, categoryId, hidden, flag }) {\n      return await this._treeChildren({ language, categoryId, hidden, flag });\n    }\n\n    async _treeChildren({ language, categoryId, hidden, flag }) {\n      const list = await this.children({ language, categoryId, hidden, flag });\n      for (const item of list) {\n        if (item.catalog) {\n          // only categoryId\n          item.children = await this._treeChildren({ categoryId: item.id });\n        }\n      }\n      return list;\n    }\n\n  }\n\n  return Category;\n};\n","const path = require('path');\nconst require3 = require('require3');\nconst ejs = require3('@zhennann/ejs');\nconst pMap = require3('p-map');\nconst extend = require3('extend2');\nconst uuid = require3('uuid');\nconst fse = require3('fs-extra');\nconst moment = require3('moment');\nconst glob = require3('glob');\nconst bb = require3('bluebird');\nconst CleanCSS = require3('clean-css');\nconst shajs = require3('sha.js');\nconst babel = require3('babel-core');\nconst UglifyJS = require3('uglify-js');\nconst time = require('../common/time.js');\n\nmodule.exports = app => {\n\n  class Render extends app.Service {\n\n    async renderAllFiles({ language }) {\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language });\n      // render static\n      await this._renderStatic({ site });\n      // render articles\n      await this._renderArticles({ site });\n      // render index\n      await this._renderIndex({ site });\n    }\n\n    async renderArticle({ key, inner }) {\n      // article\n      const article = await this._getArticle({ key, inner });\n      if (!article) return;\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language: article.language });\n      // render article\n      await this._renderArticle({ site, article });\n      if (!inner) {\n        // write sitemap\n        await this._writeSitemap({ site, article });\n        // render index\n        await this._renderIndex({ site });\n      }\n    }\n\n    async deleteArticle({ key, article, inner }) {\n      // clearCache\n      ejs.clearCache();\n      // site\n      const site = await this.getSite({ language: article.language });\n      // remove file\n      const pathDist = await this.getPathDist(site, article.language);\n      await fse.remove(path.join(pathDist, article.url));\n      if (!inner) {\n        // remove sitemap\n        let xml = await fse.readFile(path.join(pathDist, 'sitemap.xml'));\n        const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n        xml = xml.toString().replace(regexp, '');\n        // save\n        await fse.writeFile(path.join(pathDist, 'sitemap.xml'), xml);\n        // render index\n        await this._renderIndex({ site });\n      }\n    }\n\n    async getArticleUrl({ key }) {\n      // article\n      const article = await this._getArticle({ key, inner: true });\n      if (!article) return;\n      // site\n      const site = await this.getSite({ language: article.language });\n      // url\n      return {\n        relativeUrl: article.url,\n        url: this.getUrl(site, site.language.current, article.url),\n      };\n    }\n\n    async _getArticle({ key, inner }) {\n      if (!inner) {\n        // check right\n        const roleAnonymous = await this.ctx.meta.role.getSystemRole({ roleName: 'anonymous' });\n        const right = await this.ctx.meta.atom.checkRoleRightRead({ atom: { id: key.atomId }, roleId: roleAnonymous.id });\n        if (!right) return null;\n      }\n      // article\n      const article = await this.ctx.meta.atom.read({ key, user: { id: 0 } });\n      if (!article) return null;\n      // check language\n      if (!article.language) this.ctx.throw(1001);\n      return article;\n    }\n\n    async _renderArticles({ site }) {\n      // anonymous user\n      let userId;\n      const user = await this.ctx.meta.user.get({ anonymous: true });\n      if (user) {\n        userId = user.id;\n      } else {\n        userId = await this.ctx.meta.user.anonymous();\n      }\n      // articles\n      const articles = await this.ctx.meta.atom.select({\n        atomClass: { module: 'a-cms', atomClassName: 'article' },\n        options: {\n          where: {\n            'a.atomFlag': 2,\n            'f.language': site.language.current,\n          },\n          orders: [[ 'a.updatedAt', 'desc' ]],\n          page: null,\n          mode: 'search',\n        },\n        user: { id: userId },\n        pageForce: false,\n      });\n      // concurrency\n      const mapper = article => {\n        // render article\n        return this._renderArticle({ site, article });\n      };\n      await pMap(articles, mapper, { concurrency: 10 });\n      // write sitemap\n      await this._writeSitemaps({ site, articles });\n    }\n\n    async _renderStatic({ site }) {\n      // static\n      const pathIntermediate = await this.getPathIntermediate(site.language.current);\n      const staticFiles = await bb.fromCallback(cb => {\n        glob(`${pathIntermediate}/static/\\*\\*/\\*.ejs`, cb);\n      });\n      for (const item of staticFiles) {\n        // data\n        const data = await this.getData({ site });\n        // path\n        const _fileSrc = item.substr(pathIntermediate.length + 1);\n        await this._renderFile({\n          fileSrc: _fileSrc,\n          fileDest: _fileSrc.replace('.ejs', '.html'),\n          data,\n        });\n      }\n    }\n\n    async _renderIndex({ site }) {\n      // index\n      const pathIntermediate = await this.getPathIntermediate(site.language.current);\n      const indexFiles = await bb.fromCallback(cb => {\n        glob(`${pathIntermediate}/main/index/\\*\\*/\\*.ejs`, cb);\n      });\n      for (const item of indexFiles) {\n        // data\n        const data = await this.getData({ site });\n        // path\n        const _fileSrc = item.substr(pathIntermediate.length + 1);\n        const _fileDest = _fileSrc.substr('main/index/'.length).replace('.ejs', '.html');\n        await this._renderFile({\n          fileSrc: _fileSrc,\n          fileDest: _fileDest,\n          data,\n        });\n      }\n    }\n\n    async _writeSitemap({ site, article }) {\n      const loc = this.getUrl(site, site.language.current, article.url);\n      const lastmod = moment(article.updatedAt).format();\n      // load\n      const pathDist = await this.getPathDist(site, site.language.current);\n      const fileName = path.join(pathDist, 'sitemap.xml');\n      let xml;\n      const exists = await fse.pathExists(fileName);\n      if (!exists) {\n        xml =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n</urlset>`;\n      } else {\n        xml = await fse.readFile(fileName);\n        xml = xml.toString();\n        // remove\n        const regexp = new RegExp(` {2}<url>\\\\s+<loc>[^<]*${article.url}[^<]*</loc>[\\\\s\\\\S]*?</url>[\\\\r\\\\n]`);\n        xml = xml.replace(regexp, '');\n        // append\n        xml = xml.replace('<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">',\n          `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>`);\n      }\n      // save\n      await fse.writeFile(fileName, xml);\n    }\n\n    async _writeSitemaps({ site, articles }) {\n      // xml\n      let xml =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n`;\n      for (const article of articles) {\n        const loc = this.getUrl(site, site.language.current, article.url);\n        const lastmod = moment(article.updatedAt).format();\n        xml +=\n`  <url>\n    <loc>${loc}</loc>\n    <lastmod>${lastmod}</lastmod>\n  </url>\n`;\n      }\n      xml += '</urlset>';\n      // save\n      const pathDist = await this.getPathDist(site, site.language.current);\n      const fileName = path.join(pathDist, 'sitemap.xml');\n      await fse.writeFile(fileName, xml);\n    }\n\n    async _renderArticle({ site, article }) {\n      // data\n      const data = await this.getData({ site });\n      data.article = article;\n      // url\n      let url;\n      if (article.slug) {\n        url = `articles/${article.slug}.html`;\n      } else {\n        url = article.url || `articles/${uuid.v4().replace(/-/g, '')}.html`;\n      }\n      await this._renderFile({\n        fileSrc: 'main/article.ejs',\n        fileDest: url,\n        data,\n      });\n      // save\n      await this.ctx.model.article.update({\n        id: article.id,\n        url,\n      });\n      article.url = url;\n    }\n\n    async _renderFile({ fileSrc, fileDest, data }) {\n      // site\n      const site = data.site;\n      // language\n      const language = site.language.current;\n      // src\n      const pathIntermediate = await this.getPathIntermediate(language);\n      const fileName = path.join(pathIntermediate, fileSrc);\n      // data\n      data._filename = fileName;\n      data._path = fileSrc.replace('.ejs', '');\n      // env site\n      data.env('site', {\n        path: data._path,\n        serverUrl: site.serverUrl,\n        rawRootUrl: this.getUrlRawRoot(site),\n      });\n      // render\n      let content = await ejs.renderFile(fileName, data, this.getOptions());\n      content = await this._renderEnvs({ data, content });\n      content = await this._renderCSSJSes({ data, content });\n      // dest\n      const pathDist = await this.getPathDist(site, language);\n      const fileWrite = path.join(pathDist, fileDest);\n      // write\n      await fse.outputFile(fileWrite, content);\n    }\n\n    async _renderCSSJSes({ data, content }) {\n      content = await this._renderCSSJS({ data, content, type: 'CSS', items: data._csses });\n      content = await this._renderCSSJS({ data, content, type: 'JS', items: data._jses });\n      return content;\n    }\n\n    async _renderCSSJS({ data, content, type, items }) {\n      if (items.length === 0) return content;\n      // site\n      const site = data.site;\n      // cache\n      if (!site._cache) site._cache = {};\n      if (!site._cache[type])site._cache[type] = {};\n      const cacheSha = shajs('sha256').update(items.join(',')).digest('hex');\n      let urlDest;\n      if (site._cache[type][cacheSha]) {\n        urlDest = site._cache[type][cacheSha];\n      } else {\n        // combine\n        let result = '';\n        for (const item of items) {\n          let _content;\n          if (path.extname(item) === '.ejs') {\n            // data\n            data._filename = item;\n            _content = await ejs.renderFile(item, data, this.getOptions());\n          } else {\n            _content = await fse.readFile(item);\n          }\n          // minify\n          if (type === 'CSS') {\n            if (item.indexOf('.min.css') === -1) {\n              const output = new CleanCSS().minify(_content);\n              _content = output.styles;\n            }\n          } else {\n            if (item.indexOf('.min.js') === -1) {\n              _content = babel.transform(_content, { ast: false, babelrc: false, presets: [ 'env' ] }).code;\n              const output = UglifyJS.minify(_content);\n              if (output.error) throw new Error(`${output.error.name}: ${output.error.message}`);\n              _content = output.code;\n            }\n          }\n          // append\n          result += _content + '\\n';\n        }\n        // save\n        const sha = shajs('sha256').update(result).digest('hex');\n        // dest\n        const fileDest = `assets/${type.toLowerCase()}/${sha}.${type.toLowerCase()}`;\n        const pathDist = await this.getPathDist(site, site.language.current);\n        const fileWrite = path.join(pathDist, fileDest);\n        // write\n        await fse.outputFile(fileWrite, result);\n        // url\n        urlDest = this.getUrl(site, site.language.current, fileDest);\n        // cache\n        site._cache[type][cacheSha] = urlDest;\n      }\n      // replace\n      const regexp = new RegExp(`__${type}__`);\n      return content.replace(regexp, urlDest);\n    }\n\n    async _renderEnvs({ data, content }) {\n      // site\n      const site = data.site;\n      // env\n      const _env = {};\n      for (const name of Object.keys(data._envs)) {\n        let value;\n        const keys = name.split('.');\n        for (let index = keys.length - 1; index >= 0; index--) {\n          const key = keys[index];\n          value = value ? { [key]: value } : { [key]: data._envs[name] };\n        }\n        extend(true, _env, value);\n      }\n      // combine\n      const env = extend(true, {\n        base: site.base,\n        language: site.language,\n      }, site.env, _env);\n      if (data.article) {\n        env.article = extend(true, {}, data.article);\n        delete env.article.summary;\n        delete env.article.content;\n        delete env.article.html;\n        delete env.article.contentSearch;\n      }\n      // replace\n      const text = `\n<script type=\"text/javascript\">\nvar env=${JSON.stringify(env, null, 2)};\n</script>\n`;\n      const regexp = new RegExp('__ENV__');\n      return content.replace(regexp, text);\n    }\n\n    async getPathCustom(language) {\n      const cms = await this.getPathCms();\n      return path.join(cms, language, 'custom');\n    }\n    async getPathIntermediate(language) {\n      const cms = await this.getPathCms();\n      return path.join(cms, language, 'intermediate');\n    }\n    async getPathDist(site, language) {\n      const rawDist = await this.getPathRawDist();\n      return path.join(rawDist, language === site.language.default ? '' : '/' + language);\n    }\n    async getPathCms() {\n      return await this.ctx.meta.file.getPath('cms');\n    }\n    async getPathRawDist() {\n      return await this.ctx.meta.file.getPath('cms/dist');\n    }\n\n    getUrlRawRoot(site) {\n      if (this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal) {\n        const publicDir = this.ctx.app.config.static.prefix;\n        const prefix = this.ctx.host ? `${this.ctx.protocol}://${this.ctx.host}` : '';\n        return `${prefix}${publicDir}${this.ctx.instance.id}/cms/dist`;\n      }\n      return `${site.host.url}${site.host.rootPath ? '/' + site.host.rootPath : ''}`;\n    }\n    getUrlRoot(site, language) {\n      const rawRoot = this.getUrlRawRoot(site);\n      return `${rawRoot}${language === site.language.default ? '' : '/' + language}`;\n    }\n    getUrl(site, language, path) {\n      const urlRoot = this.getUrlRoot(site, language);\n      return path ? `${urlRoot}/${path}` : urlRoot;\n    }\n    getServerUrl(path) {\n      return this.ctx.meta.file.getUrl(path);\n    }\n\n    async getData({ site }) {\n      // languages\n      if (!site.languages) {\n        site.languages = [];\n        for (const item of site.language.items.split(',')) {\n          site.languages.push({\n            name: item,\n            title: this.ctx.text.locale(item, item),\n            url: this.getUrl(site, item, ''),\n          });\n        }\n      }\n      // server url\n      if (!site.serverUrl) {\n        site.serverUrl = this.getServerUrl('');\n      }\n      // data\n      const self = this;\n      const _csses = [];\n      const _jses = [];\n      const _envs = {};\n      let _pathIntermediate = await this.getPathIntermediate(site.language.current);\n      _pathIntermediate = path.join(_pathIntermediate, '/');\n      return {\n        ctx: self.ctx,\n        site,\n        _csses,\n        _jses,\n        _envs,\n        require(fileName) {\n          const _path = self.resolvePath('', this._filename, fileName);\n          return require(_path);\n        },\n        url(fileName, language) {\n          let _path = self.resolvePath('', path.relative(_pathIntermediate, this._filename), fileName);\n          _path = _path.replace(/\\\\/gi, '/');\n          return self.getUrl(site, language || site.language.current, _path);\n        },\n        css(fileName) {\n          _csses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n        },\n        js(fileName) {\n          _jses.push(self.resolvePath(_pathIntermediate, this._filename, fileName));\n        },\n        env(name, value) {\n          _envs[name] = value;\n        },\n        text(str) {\n          return this.ctx.text.locale(site.language.current, str);\n        },\n        util: {\n          time,\n          formatDateTime(date) {\n            return this.time.formatDateTime(date, `${site.env.format.date} ${site.env.format.time}`);\n          },\n        },\n      };\n    }\n\n    resolvePath(pathRoot, fileCurrent, fileName) {\n      if (!fileName) return pathRoot;\n      if (fileName.charAt(0) === '.') return path.join(path.dirname(fileCurrent), fileName); // not use path.resolve\n      return path.join(pathRoot, fileName);\n    }\n\n    getOptions() {\n      return {\n        async: true,\n        cache: true,\n        compileDebug: this.ctx.app.meta.isTest || this.ctx.app.meta.isLocal,\n        outputFunctionName: 'echo',\n      };\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async getSite({ language }) {\n      const siteBase = await this.combineSiteBase();\n      return await this.combineSite({ siteBase, language });\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSiteBase() {\n      // site\n      const site = await this.ctx.service.site.getConfigSiteBase();\n      // site(db) special for language/themes\n      const configSite = await this.ctx.service.site.getConfigSite();\n      if (configSite && configSite.language) site.language = configSite.language;\n      if (configSite && configSite.themes) site.themes = configSite.themes;\n      return site;\n    }\n\n    // site<plugin<theme<site(db)<language(db)\n    async combineSite({ siteBase, language }) {\n      // themeModuleName\n      const themeModuleName = siteBase.themes[language];\n      if (!themeModuleName) this.ctx.throw(1002);\n      // theme\n      const theme = this.ctx.config.module(themeModuleName).theme;\n      // site(db)\n      const configSite = await this.ctx.service.site.getConfigSite();\n      // language(db)\n      const configLanguage = await this.ctx.service.site.getConfigLanguage({ language });\n      // combine\n      return extend(true, {},\n        siteBase, theme, configSite, configLanguage,\n        { language: { current: language } }\n      );\n    }\n\n  }\n\n  return Render;\n};\n","const _formatDateTime = function(date, fmt) { // original author: meizz\n  const o = {\n    'M+': date.getMonth() + 1, // month\n    'D+': date.getDate(), // day\n    'H+': date.getHours(), // hour\n    'm+': date.getMinutes(), // minute\n    's+': date.getSeconds(), // second\n    'Q+': Math.floor((date.getMonth() + 3) / 3), // quarter\n    S: date.getMilliseconds(), // millisecond\n  };\n  if (/(Y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n  for (const k in o) { if (new RegExp('(' + k + ')').test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length))); }\n  return fmt;\n};\n\nmodule.exports = {\n  now() {\n    return this.formatDateTime(null);\n  },\n  today() {\n    return this.formatDate(null);\n  },\n  formatDateTime(date, fmt) {\n    date = date || new Date();\n    if (typeof (date) !== 'object') date = new Date(date);\n    fmt = fmt || 'YYYY-MM-DD HH:mm:ss';\n    return _formatDateTime(date, fmt);\n  },\n  formatDate(date, sep) {\n    sep = sep || '-';\n    return this.formatDateTime(date, `YYYY${sep}MM${sep}DD`);\n  },\n  formatTime(date, sep) {\n    sep = sep || ':';\n    return this.formatDateTime(date, `HH${sep}mm${sep}ss`);\n  },\n};\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 23;","const path = require('path');\nconst require3 = require('require3');\nconst fse = require3('fs-extra');\nconst glob = require3('glob');\nconst bb = require3('bluebird');\nconst extend = require3('extend2');\n\nmodule.exports = app => {\n\n  class Site extends app.Service {\n\n    async getConfigSiteBase() {\n      // site\n      const site = extend(true, {}, this.ctx.config.site);\n      // plugins\n      site.plugins = {};\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin) {\n          site.plugins[relativeName] = this.ctx.config.module(relativeName).plugin;\n        }\n      }\n      return site;\n    }\n\n    async getConfigSite() {\n      return await this.ctx.meta.status.get('config-site');\n    }\n\n    async setConfigSite({ data }) {\n      await this.ctx.meta.status.set('config-site', data);\n    }\n\n    async getConfigLanguagePreview({ language }) {\n      const site = await this.ctx.service.render.getSite({ language });\n      this._adjustConfigLanguange(site);\n      return site;\n    }\n\n    async getConfigLanguage({ language }) {\n      return await this.ctx.meta.status.get(`config-${language}`);\n    }\n\n    async setConfigLanguage({ language, data }) {\n      this._adjustConfigLanguange(data);\n      await this.ctx.meta.status.set(`config-${language}`, data);\n    }\n\n    async getLanguages() {\n      const siteBase = await this.ctx.service.render.combineSiteBase();\n      const languages = [];\n      for (const item of siteBase.language.items.split(',')) {\n        languages.push({\n          title: this.ctx.text(item),\n          value: item,\n        });\n      }\n      return languages;\n    }\n\n    async getUrl({ language, path }) {\n      const site = await this.ctx.service.render.getSite({ language });\n      return this.ctx.service.render.getUrl(site, language, path);\n    }\n\n    _adjustConfigLanguange(data) {\n      if (data) {\n        delete data.host;\n        delete data.language;\n        delete data.themes;\n      }\n    }\n\n    async buildLanguages() {\n      // time start\n      const timeStart = new Date();\n      // site\n      const site = await this.ctx.service.render.combineSiteBase();\n      for (const language of site.language.items.split(',')) {\n        await this.buildLanguage({ language });\n      }\n      // time end\n      const timeEnd = new Date();\n      const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n      return {\n        time,\n      };\n    }\n\n    async buildLanguage({ language }) {\n      // time start\n      const timeStart = new Date();\n\n      // site\n      const site = await this.ctx.service.render.getSite({ language });\n\n      // / clear\n\n      // intermediate\n      const pathIntermediate = await this.ctx.service.render.getPathIntermediate(language);\n      await fse.remove(pathIntermediate);\n\n      // dist\n      const pathDist = await this.ctx.service.render.getPathDist(site, language);\n      //   solution: 1\n      // const distPaths = [ 'articles', 'asserts', 'plugins', 'static', 'index.html', 'robots.txt', 'sitemap.xml', 'sitemapindex.xml' ];\n      // for (const item of distPaths) {\n      //   await fse.remove(path.join(pathDist, item));\n      // }\n      //   solution: 2\n      const distFiles = await bb.fromCallback(cb => {\n        glob(`${pathDist}/\\*`, cb);\n      });\n      const languages = site.language.items.split(',');\n      for (const item of distFiles) {\n        if (languages.indexOf(path.basename(item)) === -1) {\n          await fse.remove(item);\n        }\n      }\n\n      // / copy files to intermediate\n      // /  plugins<theme<custom\n\n      // plugins\n      for (const relativeName in this.app.meta.modules) {\n        const module = this.app.meta.modules[relativeName];\n        if (module.package.eggBornModule && module.package.eggBornModule.cms && module.package.eggBornModule.cms.plugin) {\n          const pluginPath = path.join(module.root, 'backend/cms/plugin');\n          const pluginFiles = await bb.fromCallback(cb => {\n            glob(`${pluginPath}/\\*`, cb);\n          });\n          for (const item of pluginFiles) {\n            await fse.copy(item, path.join(pathIntermediate, 'plugins', relativeName, path.basename(item)));\n          }\n        }\n      }\n\n      // theme\n      if (!site.themes[language]) this.ctx.throw(1002);\n      const themeModule = this.app.meta.modules[site.themes[language]];\n      if (!themeModule) this.ctx.throw(1003);\n      const themePath = path.join(themeModule.root, 'backend/cms/theme');\n      const themeFiles = await bb.fromCallback(cb => {\n        glob(`${themePath}/\\*`, cb);\n      });\n      for (const item of themeFiles) {\n        await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n      }\n\n      // custom\n      const customPath = await this.ctx.service.render.getPathCustom(language);\n      const customFiles = await bb.fromCallback(cb => {\n        glob(`${customPath}/\\*`, cb);\n      });\n      for (const item of customFiles) {\n        await fse.copy(item, path.join(pathIntermediate, path.basename(item)));\n      }\n\n      // custom dist\n      const customDistFiles = await bb.fromCallback(cb => {\n        glob(`${customPath}/dist/\\*`, cb);\n      });\n      for (const item of customDistFiles) {\n        await fse.copy(item, path.join(pathDist, path.basename(item)));\n      }\n\n      // / copy files to dist (ignore .ejs)\n      // /  assets plugins/[plugin]/assets\n      for (const dir of [ 'assets', 'plugins' ]) {\n        if (dir === 'assets') {\n          const _filename = path.join(pathIntermediate, 'assets');\n          const exists = await fse.pathExists(_filename);\n          if (exists) {\n            await fse.copy(_filename, path.join(pathDist, 'assets'));\n          }\n        } else {\n          const pluginsFiles = await bb.fromCallback(cb => {\n            glob(`${pathIntermediate}/plugins/\\*`, cb);\n          });\n          for (const item of pluginsFiles) {\n            const _filename = `${item}/assets`;\n            const exists = await fse.pathExists(_filename);\n            if (exists) {\n              await fse.copy(_filename, path.join(pathDist, 'plugins', path.basename(item), 'assets'));\n            }\n          }\n        }\n        const ejsFiles = await bb.fromCallback(cb => {\n          glob(`${pathDist}/${dir}/\\*\\*/\\*.ejs`, cb);\n        });\n        for (const item of ejsFiles) {\n          await fse.remove(item);\n        }\n      }\n\n      // / robots.txt\n      await this.createRobots({ site });\n\n      // / sitemapIndex\n      await this.createSitemapIndex({ site });\n\n      // render all files\n      await this.ctx.service.render.renderAllFiles({ language });\n\n      // time end\n      const timeEnd = new Date();\n      const time = (timeEnd.valueOf() - timeStart.valueOf()) / 1000; // second\n      return {\n        time,\n      };\n    }\n\n    async createRobots({ site }) {\n      // content\n      const urlRawRoot = this.ctx.service.render.getUrlRawRoot(site);\n      const content = `Sitemap: ${urlRawRoot}/sitemapindex.xml`;\n      // write\n      const pathRawDist = await this.ctx.service.render.getPathRawDist(site);\n      await fse.outputFile(`${pathRawDist}/robots.txt`, content);\n    }\n\n    async createSitemapIndex({ site }) {\n      // content\n      const urlRawRoot = this.ctx.service.render.getUrlRawRoot(site);\n      let items = '';\n      for (const language of site.language.items.split(',')) {\n        items +=\n`  <sitemap>\n    <loc>${urlRawRoot}${language === site.language.default ? '' : '/' + language}/sitemap.xml</loc>\n  </sitemap>\n`;\n      }\n      const content =\n`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${items}</sitemapindex>`;\n      // write\n      const pathRawDist = await this.ctx.service.render.getPathRawDist(site);\n      await fse.outputFile(`${pathRawDist}/sitemapindex.xml`, content);\n    }\n\n  }\n\n  return Site;\n};\n","module.exports = app => {\n\n  class Tag extends app.Service {\n\n    async list({ options }) {\n      return await this.ctx.model.tag.select(options);\n    }\n\n    async create({ language, tagName }) {\n      // check if exists\n      const tag = await this.ctx.model.tag.get({\n        language, tagName,\n      });\n      if (tag) return tag.id;\n      // insert\n      const res = await this.ctx.model.tag.insert({\n        language, tagName, articleCount: 0,\n      });\n      return res.insertId;\n    }\n\n    async updateArticleTags({ key, item }) {\n      // tags\n      let tags = null;\n      if (item.tags) {\n        tags = JSON.parse(item.tags);\n        for (const tag of tags) {\n          if (tag.id === 0) {\n            tag.id = await this.create({ language: item.language, tagName: tag.name });\n          }\n        }\n      }\n      // force delete\n      await this.deleteArticleTags({ key });\n      // new\n      if (tags && tags.length > 0) {\n        await this.ctx.model.articleTag.insert({\n          atomId: key.atomId,\n          itemId: key.itemId,\n          tags: JSON.stringify(tags),\n        });\n        for (const tag of tags) {\n          await this.ctx.model.articleTagRef.insert({\n            atomId: key.atomId,\n            itemId: key.itemId,\n            tagId: tag.id,\n          });\n        }\n      }\n      // ok\n      return tags;\n    }\n\n    async deleteArticleTags({ key }) {\n      await this.ctx.model.articleTag.delete({\n        itemId: key.itemId,\n      });\n      await this.ctx.model.articleTagRef.delete({\n        itemId: key.itemId,\n      });\n    }\n\n    async setTagArticleCount({ tagsNew, tagsOld }) {\n      // tags\n      const tags = {};\n      if (tagsNew) {\n        const _tags = typeof tagsNew === 'string' ? JSON.parse(tagsNew) : tagsNew;\n        for (const tag of _tags) {\n          tags[tag.id] = tag;\n        }\n      }\n      if (tagsOld) {\n        const _tags = typeof tagsOld === 'string' ? JSON.parse(tagsOld) : tagsOld;\n        for (const tag of _tags) {\n          tags[tag.id] = tag;\n        }\n      }\n      // loop\n      for (const id in tags) {\n        const articleCount = await this.calcArticleCount({ id });\n        if (articleCount > 0) {\n          // update\n          await this.ctx.model.tag.update({ id, articleCount });\n        } else {\n          const articleCount2 = await this.calcArticleCount2({ id });\n          if (articleCount2 > 0) {\n            // update\n            await this.ctx.model.tag.update({ id, articleCount });\n          } else {\n            // delete\n            await this.ctx.model.tag.delete({ id });\n          }\n        }\n      }\n    }\n\n    async calcArticleCount({ id }) {\n      const res = await this.ctx.model.query(`\n        select count(*) articleCount from aCmsArticleTagRef a\n          inner join aAtom b on a.atomId=b.id\n          where a.iid=? and a.tagId=? and b.iid=? and b.deleted=0 and b.atomFlag=2\n        `,\n      [ this.ctx.instance.id, id, this.ctx.instance.id ]);\n      return res[0].articleCount;\n    }\n\n    async calcArticleCount2({ id }) {\n      const res = await this.ctx.model.query(`\n        select count(*) articleCount from aCmsArticleTagRef a where a.iid=? and a.tagId=?\n        `,\n      [ this.ctx.instance.id, id ]);\n      return res[0].articleCount;\n    }\n\n  }\n\n  return Tag;\n};\n","const article = require('./model/article.js');\nconst category = require('./model/category.js');\nconst content = require('./model/content.js');\nconst tag = require('./model/tag.js');\nconst articleTag = require('./model/articleTag.js');\nconst articleTagRef = require('./model/articleTagRef.js');\n\nmodule.exports = app => {\n  const models = {\n    article,\n    category,\n    content,\n    tag,\n    articleTag,\n    articleTagRef,\n  };\n  return models;\n};\n","module.exports = app => {\n  class Article extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticle', options: { disableDeleted: false } });\n    }\n  }\n  return Article;\n};\n","module.exports = app => {\n  class Category extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsCategory', options: { disableDeleted: true } });\n    }\n  }\n  return Category;\n};\n","module.exports = app => {\n  class Content extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsContent', options: { disableDeleted: false } });\n    }\n  }\n  return Content;\n};\n","module.exports = app => {\n  class Tag extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsTag', options: { disableDeleted: true } });\n    }\n  }\n  return Tag;\n};\n","module.exports = app => {\n  class ArticleTag extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticleTag', options: { disableDeleted: true } });\n    }\n  }\n  return ArticleTag;\n};\n","module.exports = app => {\n  class ArticleTagRef extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticleTagRef', options: { disableDeleted: true } });\n    }\n  }\n  return ArticleTagRef;\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        article: {\n          info: {\n            title: 'Article',\n            tableName: 'aCmsArticleView',\n            tableNameFull: 'aCmsArticleViewFull',\n            tableNameSearch: 'aCmsArticleViewSearch',\n            tableNameTag: 'aCmsArticleViewTag',\n            flow: 1,\n          },\n          actions: {\n            publish: {\n              code: 101,\n              title: 'Publish',\n              flag: '1,2',\n            },\n          },\n          flags: {\n            1: {\n              title: 'Publishing',\n            },\n            2: {\n              title: 'Published',\n            },\n          },\n          validator: 'article',\n          search: {\n            validator: 'articleSearch',\n          },\n        },\n      },\n      functions: {\n        createArticle: {\n          title: 'Create Article',\n          scene: 'create',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'create',\n          sorting: 1,\n          menu: 1,\n        },\n        listArticle: {\n          title: 'Article List',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'read',\n          sorting: 1,\n          menu: 1,\n        },\n        listArticleByCategory: {\n          title: 'Article List(by category)',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'article',\n          action: 'read',\n          sorting: 1,\n          menu: 1,\n          actionPath: 'article/category',\n        },\n      },\n    },\n    validation: {\n      validators: {\n        article: {\n          schemas: 'article',\n        },\n        articleSearch: {\n          schemas: 'articleSearch',\n        },\n        category: {\n          schemas: 'category',\n        },\n      },\n      keywords: {},\n      schemas: {\n        article: schemas.article,\n        articleSearch: schemas.articleSearch,\n        category: schemas.category,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: 'config/list',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // article\n  schemas.article = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'articleItem',\n      },\n    },\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Atom Name',\n        notEmpty: true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n        notEmpty: true,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n        notEmpty: true,\n      },\n      sticky: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Sticky',\n        default: false,\n      },\n      keywords: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Keywords',\n      },\n      tags: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Tags',\n      },\n      description: {\n        type: 'string',\n        ebType: 'text',\n        ebTextarea: true,\n        ebTitle: 'Description',\n      },\n      editMode: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Edit Mode',\n        notEmpty: true,\n      },\n      slug: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Slug',\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      flag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      extra: {\n        type: 'string',\n        ebType: 'text',\n        ebTextarea: true,\n        ebTitle: 'Extra Attributes',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n      allowComment: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Allow Comment',\n        default: false,\n      },\n    },\n  };\n\n  // article search\n  schemas.articleSearch = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'articleSearch',\n      },\n    },\n    properties: {\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n    },\n  };\n\n  // category\n  schemas.category = {\n    type: 'object',\n    properties: {\n      categoryName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Category name',\n        notEmpty: true,\n      },\n      hidden: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Hidden',\n        default: false,\n      },\n      sorting: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Sorting',\n      },\n      flag: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Flag',\n      },\n      catalog: {\n        type: 'boolean',\n        ebType: 'toggle',\n        ebTitle: 'Catalog',\n        ebReadOnly: true,\n        default: false,\n      },\n      language: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Language',\n        ebReadOnly: true,\n        notEmpty: true,\n      },\n    },\n  };\n\n  return schemas;\n};\n"],"sourceRoot":""}